
SPI.elf:     file format elf32-littlenios2
SPI.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000011f8 memsz 0x000011f8 flags r-x
    LOAD off    0x00002218 vaddr 0x00011218 paddr 0x000113ac align 2**12
         filesz 0x00000194 memsz 0x00000194 flags rw-
    LOAD off    0x00002540 vaddr 0x00011540 paddr 0x00011540 align 2**12
         filesz 0x00000000 memsz 0x0000013c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001040  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  000111c0  000111c0  000021c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000194  00011218  000113ac  00002218  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  00011540  00011540  00002540  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001167c  0001167c  000023ac  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004c8  00000000  00000000  000023d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00012b8a  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004381  00000000  00000000  0001542a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004d58  00000000  00000000  000197ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000063c  00000000  00000000  0001e504  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ecc  00000000  00000000  0001eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000016de  00000000  00000000  00020a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000220ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003d0  00000000  00000000  00022130  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00023d06  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00023d09  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00023d0c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00023d0d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00023d0e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00023d17  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00023d20  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00023d29  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  00023d3b  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f72  00000000  00000000  00023d77  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00074a8d  00000000  00000000  00028ce9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000111c0 l    d  .rodata	00000000 .rodata
00011218 l    d  .rwdata	00000000 .rwdata
00011540 l    d  .bss	00000000 .bss
0001167c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SPI_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
000111df l     O .rodata	0000002b CSWTCH.21
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00011218 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001138c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000112fc l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011014 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
0001156c g     O .bss	00000004 alt_instruction_exception_handler
00011548 g     O .bss	00000002 send_spi
00010d44 g     F .text	0000002c alt_main
0001157c g     O .bss	00000100 alt_irq
000113ac g       *ABS*	00000000 __flash_rwdata_start
00010258 g     F .text	00000054 timer_1_init
0001167c g       *ABS*	00000000 __alt_heap_start
00010d74 g     F .text	00000004 __malloc_unlock
00010228 g     F .text	00000030 timer_0_init
00011390 g     O .rwdata	00000004 jtag_uart
000110fc g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010e50 g     F .text	0000005c alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011558 g     O .bss	00000004 errno
00011564 g     O .bss	00000004 alt_argv
00019380 g       *ABS*	00000000 _gp
00010dc4 g     F .text	00000004 usleep
000101bc g     F .text	0000006c accelerometer_isr
00011328 g     O .rwdata	00000030 alt_fd_list
00011088 g     F .text	00000070 alt_find_dev
000108ac g     F .text	00000028 memcpy
00011104 g     F .text	00000070 alt_exception_cause_generated_bad_addr
0001088c g     F .text	00000010 malloc
00010790 g     F .text	00000064 .hidden __udivsi3
00010b98 g     F .text	00000048 _sbrk_r
00011394 g     O .rwdata	00000004 alt_max_fd
00010c00 g     F .text	00000090 alt_irq_register
00011380 g     O .rwdata	00000004 _global_impure_ptr
0001167c g       *ABS*	00000000 __bss_end
0001155c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011358 g     O .rwdata	00000028 alt_dev_null
00011010 g     F .text	00000004 alt_dcache_flush_all
00010878 g     F .text	00000014 calloc
000113ac g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011398 g     O .rwdata	00000008 alt_dev_list
00011218 g       *ABS*	00000000 __ram_rodata_end
000107f4 g     F .text	0000005c .hidden __umodsi3
0001167c g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010934 g     F .text	00000100 _free_r
00011544 g     O .bss	00000001 newTapData
00010180 g     F .text	0000003c _start
00010de8 g     F .text	00000010 alt_sys_init
00010e00 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011540 g     O .bss	00000004 prev_time
00010850 g     F .text	00000028 .hidden __mulsi3
00011218 g       *ABS*	00000000 __ram_rwdata_start
000111c0 g       *ABS*	00000000 __ram_rodata_start
00010f64 g     F .text	000000ac alt_busy_sleep
00010eac g     F .text	0000005c alt_up_accelerometer_spi_read_y_axis
00011174 g     F .text	00000030 memcmp
0001167c g       *ABS*	00000000 __alt_stack_base
0001101c g     F .text	0000006c alt_dev_llist_insert
00010d70 g     F .text	00000004 __malloc_lock
00010d78 g     F .text	0000004c sbrk
000108d4 g     F .text	00000060 _calloc_r
00011540 g       *ABS*	00000000 __bss_start
0001030c g     F .text	00000178 updateTextISR
00010be0 g     F .text	00000020 memset
00010484 g     F .text	00000218 main
00011560 g     O .bss	00000004 alt_envp
00020000 g       *ABS*	00000000 __alt_heap_limit
00010a34 g     F .text	00000164 _malloc_r
000113a8 g     O .rwdata	00000004 alt_errno
0001069c g     F .text	00000080 .hidden __divsi3
000111c0 g       *ABS*	00000000 __flash_rodata_start
00010dc8 g     F .text	00000020 alt_irq_init
00011384 g     O .rwdata	00000004 _impure_ptr
00011568 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00011570 g     O .bss	0000000c currMsg
000113a0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010df8 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000102ac g     F .text	00000038 print7seg
000113ac g       *ABS*	00000000 _edata
0001167c g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
0001071c g     F .text	00000074 .hidden __modsi3
00010f08 g     F .text	0000005c alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00010e14 g     F .text	00000020 alt_up_accelerometer_spi_read
00010e34 g     F .text	0000001c alt_up_accelerometer_spi_write
000102e4 g     F .text	00000028 getBin
000111a4 g     F .text	0000001c strlen
00011550 g     O .bss	00000004 __malloc_sbrk_start
000110f8 g     F .text	00000004 alt_icache_flush_all
00011388 g     O .rwdata	00000004 alt_priority_mask
00011554 g     O .bss	00000004 __malloc_free_list
0001154c g     O .bss	00000004 acc_dev
00010c90 g     F .text	000000b4 alt_load
0001089c g     F .text	00000010 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84055f04 	addi	r16,r16,5500
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
      mask <<= 1;
   10150:	1004907a 	slli	r2,r2,1
      i++;
   10154:	29400044 	addi	r5,r5,1
      if (active & mask)
   10158:	003ff006 	br	1011c <alt_irq_handler+0x20>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07b17 	ldw	r2,-32276(gp)
{
   10160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
   10164:	10000326 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a4e014 	ori	gp,gp,37760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10855014 	ori	r2,r2,5440

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c59f14 	ori	r3,r3,5756

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010c900 	call	10c90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010d440 	call	10d44 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <alt_after_alt_main>

000101bc <accelerometer_isr>:
// timer is decreasing value every time
// check if the time difference is small enough, in which case ignore the tap

void accelerometer_isr(){
  alt_8 data;
  alt_up_accelerometer_spi_read(acc_dev, 0x30, &data); // read INT source to clear interrupt
   101bc:	d1207317 	ldw	r4,-32308(gp)
void accelerometer_isr(){
   101c0:	defffd04 	addi	sp,sp,-12
  alt_up_accelerometer_spi_read(acc_dev, 0x30, &data); // read INT source to clear interrupt
   101c4:	d98000c4 	addi	r6,sp,3
   101c8:	01400c04 	movi	r5,48
void accelerometer_isr(){
   101cc:	dfc00215 	stw	ra,8(sp)
   101d0:	dc000115 	stw	r16,4(sp)
  alt_up_accelerometer_spi_read(acc_dev, 0x30, &data); // read INT source to clear interrupt
   101d4:	0010e140 	call	10e14 <alt_up_accelerometer_spi_read>


  // perform write operation to save a snapshot of counter value in snap reg
  IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE, 0x1); // value of data doesn't matter
   101d8:	00800044 	movi	r2,1
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18841535 	stwio	r2,4180(r3)
  alt_32 curr_time = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE);
   101e4:	1c041537 	ldwio	r16,4180(r3)
  // printf("%u\n", curr_time);

  alt_32 time_diff = prev_time - curr_time;
   101e8:	d1207017 	ldw	r4,-32320(gp)
   101ec:	2409c83a 	sub	r4,r4,r16
  alt_32 time_diff_usec = time_diff * 1310;
//   alt_16 time_diff_sec = time_diff_µsec/1000000;
  alt_16 time_diff_msec = time_diff_usec/1000;

  if ( time_diff > 15 ){ // valid tap about 20 ms
   101f0:	20c00410 	cmplti	r3,r4,16
   101f4:	1800071e 	bne	r3,zero,10214 <accelerometer_isr+0x58>
  alt_32 time_diff_usec = time_diff * 1310;
   101f8:	01414784 	movi	r5,1310
    send_spi = time_diff_msec | 0x8000;

    // alt_putstr("tap:");
    // printf("%d\n", time_diff_msec);

    newTapData = 1; // indicate that there is data to send
   101fc:	d0a07105 	stb	r2,-32316(gp)
  alt_32 time_diff_usec = time_diff * 1310;
   10200:	00108500 	call	10850 <__mulsi3>
  alt_16 time_diff_msec = time_diff_usec/1000;
   10204:	0140fa04 	movi	r5,1000
   10208:	1009883a 	mov	r4,r2
   1020c:	001069c0 	call	1069c <__divsi3>
    send_spi = time_diff_msec; // set data to send
   10210:	d0a0720d 	sth	r2,-32312(gp)
  }

  prev_time = curr_time;
   10214:	d4207015 	stw	r16,-32320(gp)
}
   10218:	dfc00217 	ldw	ra,8(sp)
   1021c:	dc000117 	ldw	r16,4(sp)
   10220:	dec00304 	addi	sp,sp,12
   10224:	f800283a 	ret

00010228 <timer_0_init>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0002);
   10228:	00c00084 	movi	r3,2
   1022c:	008000b4 	movhi	r2,2
   10230:	10c41135 	stwio	r3,4164(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   10234:	10041035 	stwio	zero,4160(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xFFFF);
   10238:	00bfffd4 	movui	r2,65535
   1023c:	00c000b4 	movhi	r3,2
   10240:	18841235 	stwio	r2,4168(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0xFFFF);
   10244:	18841335 	stwio	r2,4172(r3)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0006); // 0b0...0111
   10248:	00c00184 	movi	r3,6
   1024c:	008000b4 	movhi	r2,2
   10250:	10c41135 	stwio	r3,4164(r2)
}
   10254:	f800283a 	ret

00010258 <timer_1_init>:
void timer_1_init() {
   10258:	deffff04 	addi	sp,sp,-4
   1025c:	dfc00015 	stw	ra,0(sp)
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x0003);
   10260:	00c000c4 	movi	r3,3
   10264:	008000b4 	movhi	r2,2
   10268:	10c40935 	stwio	r3,4132(r2)
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0);
   1026c:	10040835 	stwio	zero,4128(r2)
  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, 0x502A);
   10270:	00d40a84 	movi	r3,20522
   10274:	10c40a35 	stwio	r3,4136(r2)
  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, 0x00FE);
   10278:	00c03f84 	movi	r3,254
   1027c:	10c40b35 	stwio	r3,4140(r2)
  alt_irq_register(TIMER_1_IRQ, 0, updateTextISR);
   10280:	01800074 	movhi	r6,1
   10284:	3180c304 	addi	r6,r6,780
   10288:	000b883a 	mov	r5,zero
   1028c:	01000104 	movi	r4,4
   10290:	0010c000 	call	10c00 <alt_irq_register>
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x0007); // 0b0...0111
   10294:	00c001c4 	movi	r3,7
   10298:	008000b4 	movhi	r2,2
   1029c:	10c40935 	stwio	r3,4132(r2)
}
   102a0:	dfc00017 	ldw	ra,0(sp)
   102a4:	dec00104 	addi	sp,sp,4
   102a8:	f800283a 	ret

000102ac <print7seg>:


//Prints each of the letters out to the screen
void print7seg(const char letters[6]){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_5_BASE, letters[0]);
   102ac:	20c00007 	ldb	r3,0(r4)
   102b0:	008000b4 	movhi	r2,2
   102b4:	10c41c35 	stwio	r3,4208(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_4_BASE, letters[1]);
   102b8:	20c00047 	ldb	r3,1(r4)
   102bc:	10c42035 	stwio	r3,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_3_BASE, letters[2]);
   102c0:	20c00087 	ldb	r3,2(r4)
   102c4:	10c42435 	stwio	r3,4240(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_2_BASE, letters[3]);
   102c8:	20c000c7 	ldb	r3,3(r4)
   102cc:	10c42835 	stwio	r3,4256(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_1_BASE, letters[4]);
   102d0:	20c00107 	ldb	r3,4(r4)
   102d4:	10c42c35 	stwio	r3,4272(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HEX_0_BASE, letters[5]);
   102d8:	20c00147 	ldb	r3,5(r4)
   102dc:	10c43035 	stwio	r3,4288(r2)
	return;
}
   102e0:	f800283a 	ret

000102e4 <getBin>:
int getBin(char letter){
	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
	for the 7-segment is shown in the DE0_C5 User Manual*/
	switch(letter){
   102e4:	213ff404 	addi	r4,r4,-48
   102e8:	21003fcc 	andi	r4,r4,255
   102ec:	20800ae8 	cmpgeui	r2,r4,43
   102f0:	1000041e 	bne	r2,zero,10304 <getBin+0x20>
   102f4:	00800074 	movhi	r2,1
   102f8:	2085883a 	add	r2,r4,r2
   102fc:	108477c3 	ldbu	r2,4575(r2)
   10300:	f800283a 	ret
   10304:	00803fc4 	movi	r2,255
	case 'Z':
		return 0b0100100;
	default:
		return 0b11111111;
	}
}
   10308:	f800283a 	ret

0001030c <updateTextISR>:
void updateTextISR() {
   1030c:	defff504 	addi	sp,sp,-44
   10310:	dfc00a15 	stw	ra,40(sp)
   10314:	ddc00915 	stw	r23,36(sp)
   10318:	dd800815 	stw	r22,32(sp)
   1031c:	dd400715 	stw	r21,28(sp)
   10320:	dd000615 	stw	r20,24(sp)
   10324:	dcc00515 	stw	r19,20(sp)
   10328:	dc800415 	stw	r18,16(sp)
   1032c:	dc400315 	stw	r17,12(sp)
   10330:	dc000215 	stw	r16,8(sp)
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0);
   10334:	008000b4 	movhi	r2,2
   10338:	10040835 	stwio	zero,4128(r2)
  if (currMsg.length == 0){
   1033c:	04400074 	movhi	r17,1
   10340:	8c455c04 	addi	r17,r17,5488
   10344:	8c000117 	ldw	r16,4(r17)
   10348:	8000121e 	bne	r16,zero,10394 <updateTextISR+0x88>
    char buffer[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
   1034c:	01400074 	movhi	r5,1
   10350:	01800184 	movi	r6,6
   10354:	29447604 	addi	r5,r5,4568
   10358:	d9000084 	addi	r4,sp,2
   1035c:	00108ac0 	call	108ac <memcpy>
    print7seg(buffer);
   10360:	d9000084 	addi	r4,sp,2
   10364:	00102ac0 	call	102ac <print7seg>
}
   10368:	dfc00a17 	ldw	ra,40(sp)
   1036c:	ddc00917 	ldw	r23,36(sp)
   10370:	dd800817 	ldw	r22,32(sp)
   10374:	dd400717 	ldw	r21,28(sp)
   10378:	dd000617 	ldw	r20,24(sp)
   1037c:	dcc00517 	ldw	r19,20(sp)
   10380:	dc800417 	ldw	r18,16(sp)
   10384:	dc400317 	ldw	r17,12(sp)
   10388:	dc000217 	ldw	r16,8(sp)
   1038c:	dec00b04 	addi	sp,sp,44
   10390:	f800283a 	ret
  } else if (currMsg.length <= 6){
   10394:	00800074 	movhi	r2,1
   10398:	15055c17 	ldw	r20,5488(r2)
   1039c:	808001c8 	cmpgei	r2,r16,7
   103a0:	1000181e 	bne	r2,zero,10404 <updateTextISR+0xf8>
    char buffer[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
   103a4:	01400074 	movhi	r5,1
   103a8:	01800184 	movi	r6,6
   103ac:	29447604 	addi	r5,r5,4568
   103b0:	d9000084 	addi	r4,sp,2
   103b4:	00108ac0 	call	108ac <memcpy>
    for (int i = 0; i < currMsg.length; i++){
   103b8:	0023883a 	mov	r17,zero
      buffer[i] = getBin(currMsg.text[i]) | 0b10000000;
   103bc:	04bfe004 	movi	r18,-128
    for (int i = 0; i < currMsg.length; i++){
   103c0:	8c000716 	blt	r17,r16,103e0 <updateTextISR+0xd4>
    buffer[currMsg.length - 1] &= 0b01111111; // add dot at the end of the message
   103c4:	d8800204 	addi	r2,sp,8
   103c8:	843fffc4 	addi	r16,r16,-1
   103cc:	1421883a 	add	r16,r2,r16
   103d0:	80bffe83 	ldbu	r2,-6(r16)
   103d4:	10801fcc 	andi	r2,r2,127
   103d8:	80bffe85 	stb	r2,-6(r16)
   103dc:	003fe006 	br	10360 <updateTextISR+0x54>
      buffer[i] = getBin(currMsg.text[i]) | 0b10000000;
   103e0:	a445883a 	add	r2,r20,r17
   103e4:	11000007 	ldb	r4,0(r2)
   103e8:	00102e40 	call	102e4 <getBin>
   103ec:	d8c00084 	addi	r3,sp,2
   103f0:	1c47883a 	add	r3,r3,r17
   103f4:	1484b03a 	or	r2,r2,r18
   103f8:	18800005 	stb	r2,0(r3)
    for (int i = 0; i < currMsg.length; i++){
   103fc:	8c400044 	addi	r17,r17,1
   10400:	003fef06 	br	103c0 <updateTextISR+0xb4>
   10404:	8cc00217 	ldw	r19,8(r17)
   10408:	dc800084 	addi	r18,sp,2
   1040c:	dd800204 	addi	r22,sp,8
        buffer[i] = getBin(currMsg.text[currMsg.loopCount + i - currMsg.length ]) | 0b10000000;
   10410:	057fe004 	movi	r21,-128
      if (currMsg.loopCount + i == currMsg.length - 1 - BLANK_SPACES) buffer[i] &= 0b01111111; // add the full stop
   10414:	85ffff04 	addi	r23,r16,-4
      if (currMsg.loopCount + i < currMsg.length) {
   10418:	9c00140e 	bge	r19,r16,1046c <updateTextISR+0x160>
        buffer[i] = getBin(currMsg.text[currMsg.loopCount + i]) | 0b10000000;
   1041c:	a4c5883a 	add	r2,r20,r19
        buffer[i] = getBin(currMsg.text[currMsg.loopCount + i - currMsg.length ]) | 0b10000000;
   10420:	11000007 	ldb	r4,0(r2)
   10424:	00102e40 	call	102e4 <getBin>
   10428:	1544b03a 	or	r2,r2,r21
   1042c:	90800005 	stb	r2,0(r18)
      if (currMsg.loopCount + i == currMsg.length - 1 - BLANK_SPACES) buffer[i] &= 0b01111111; // add the full stop
   10430:	bcc0031e 	bne	r23,r19,10440 <updateTextISR+0x134>
   10434:	90800003 	ldbu	r2,0(r18)
   10438:	10801fcc 	andi	r2,r2,127
   1043c:	90800005 	stb	r2,0(r18)
    for (int i = 0; i < 6; i++){
   10440:	94800044 	addi	r18,r18,1
   10444:	9cc00044 	addi	r19,r19,1
   10448:	b4bff31e 	bne	r22,r18,10418 <updateTextISR+0x10c>
    print7seg(buffer);
   1044c:	d9000084 	addi	r4,sp,2
   10450:	00102ac0 	call	102ac <print7seg>
    if (currMsg.loopCount < currMsg.length) currMsg.loopCount++;
   10454:	88800217 	ldw	r2,8(r17)
   10458:	88c00117 	ldw	r3,4(r17)
   1045c:	10c0060e 	bge	r2,r3,10478 <updateTextISR+0x16c>
   10460:	10800044 	addi	r2,r2,1
   10464:	88800215 	stw	r2,8(r17)
   10468:	003fbf06 	br	10368 <updateTextISR+0x5c>
        buffer[i] = getBin(currMsg.text[currMsg.loopCount + i - currMsg.length ]) | 0b10000000;
   1046c:	9c05c83a 	sub	r2,r19,r16
   10470:	a085883a 	add	r2,r20,r2
   10474:	003fea06 	br	10420 <updateTextISR+0x114>
    else currMsg.loopCount = 0;
   10478:	00800074 	movhi	r2,1
   1047c:	10055e15 	stw	zero,5496(r2)
}
   10480:	003fb906 	br	10368 <updateTextISR+0x5c>

00010484 <main>:
{ 
   10484:	defff804 	addi	sp,sp,-32
  currMsg.text = calloc(CHARLIM, sizeof(char));
   10488:	01400044 	movi	r5,1
   1048c:	01004004 	movi	r4,256
{ 
   10490:	dfc00715 	stw	ra,28(sp)
   10494:	dd800615 	stw	r22,24(sp)
   10498:	dd400515 	stw	r21,20(sp)
   1049c:	dd000415 	stw	r20,16(sp)
   104a0:	dcc00315 	stw	r19,12(sp)
   104a4:	dc800215 	stw	r18,8(sp)
   104a8:	dc400115 	stw	r17,4(sp)
   104ac:	dc000015 	stw	r16,0(sp)
  currMsg.text = calloc(CHARLIM, sizeof(char));
   104b0:	00108780 	call	10878 <calloc>
  acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104b4:	01000074 	movhi	r4,1
  currMsg.text = calloc(CHARLIM, sizeof(char));
   104b8:	00c00074 	movhi	r3,1
  acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104bc:	21047004 	addi	r4,r4,4544
  currMsg.text = calloc(CHARLIM, sizeof(char));
   104c0:	18855c15 	stw	r2,5488(r3)
  acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104c4:	0010df80 	call	10df8 <alt_up_accelerometer_spi_open_dev>
   104c8:	d0a07315 	stw	r2,-32308(gp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   104cc:	10006826 	beq	r2,zero,10670 <main+0x1ec>
  alt_up_accelerometer_spi_write(acc_dev, 0x2A, 0b00000001); // enable tap on z axis only
   104d0:	01800044 	movi	r6,1
   104d4:	01400a84 	movi	r5,42
   104d8:	1009883a 	mov	r4,r2
   104dc:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
  alt_up_accelerometer_spi_write(acc_dev, 0x21, 0x10); // set DUR (0x10 = 10ms)
   104e0:	d1207317 	ldw	r4,-32308(gp)
   104e4:	01800404 	movi	r6,16
   104e8:	01400844 	movi	r5,33
   104ec:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
  alt_up_accelerometer_spi_write(acc_dev, 0x1D ,0x16); // set THRESH_TAP (0x30 = 3g)
   104f0:	d1207317 	ldw	r4,-32308(gp)
   104f4:	01800584 	movi	r6,22
   104f8:	01400744 	movi	r5,29
   104fc:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
  alt_up_accelerometer_spi_write(acc_dev, 0x2F, 0b10111111); // set SINGLE_TAP to INT_1 pin
   10500:	d1207317 	ldw	r4,-32308(gp)
   10504:	01802fc4 	movi	r6,191
   10508:	01400bc4 	movi	r5,47
   1050c:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
  alt_up_accelerometer_spi_write(acc_dev, 0x2E, 0b01000000); // enable single tap to generate interrupts
   10510:	d1207317 	ldw	r4,-32308(gp)
   10514:	01801004 	movi	r6,64
   10518:	01400b84 	movi	r5,46
   1051c:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
  alt_irq_register(ACCELEROMETER_SPI_IRQ, 0, accelerometer_isr);
   10520:	01800074 	movhi	r6,1
   10524:	31806f04 	addi	r6,r6,444
   10528:	000b883a 	mov	r5,zero
   1052c:	0009883a 	mov	r4,zero
   10530:	0010c000 	call	10c00 <alt_irq_register>
  timer_0_init();
   10534:	00102280 	call	10228 <timer_0_init>
    if (newTapData) IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, send_spi | 0x8000);
   10538:	04a00004 	movi	r18,-32768
  timer_1_init();
   1053c:	00102580 	call	10258 <timer_1_init>
      IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x000b); // disable timer interrupt
   10540:	04c002c4 	movi	r19,11
      IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x0007); // 0b...1011; start the timer up again
   10544:	050001c4 	movi	r20,7
    if (newTapData) IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, send_spi | 0x8000);
   10548:	d0a07107 	ldb	r2,-32316(gp)
   1054c:	10003726 	beq	r2,zero,1062c <main+0x1a8>
   10550:	d0a0720b 	ldhu	r2,-32312(gp)
   10554:	00c000b4 	movhi	r3,2
   10558:	1484b03a 	or	r2,r2,r18
   1055c:	10bfffcc 	andi	r2,r2,65535
   10560:	18840135 	stwio	r2,4100(r3)
    usleep(75); // delay to send data
   10564:	010012c4 	movi	r4,75
    newTapData = 0; // reset new data
   10568:	d0207105 	stb	zero,-32316(gp)
    usleep(75); // delay to send data
   1056c:	0010dc40 	call	10dc4 <usleep>
    rcvd_spi = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE); // read incoming data
   10570:	008000b4 	movhi	r2,2
   10574:	14040037 	ldwio	r16,4096(r2)
    if ((rcvd_spi >> 8) == -1) {
   10578:	80bfffcc 	andi	r2,r16,65535
   1057c:	10a0001c 	xori	r2,r2,32768
   10580:	10a00004 	addi	r2,r2,-32768
   10584:	1005d23a 	srai	r2,r2,8
   10588:	10bfffd8 	cmpnei	r2,r2,-1
   1058c:	1000241e 	bne	r2,zero,10620 <main+0x19c>
      alt_up_accelerometer_spi_write(acc_dev, 0x2E, 0b00000000); // disble single tap to generate interrupts, stop the acceleometer from generating taps and possibly breaking the uart communication
   10590:	d1207317 	ldw	r4,-32308(gp)
   10594:	000d883a 	mov	r6,zero
   10598:	01400b84 	movi	r5,46
   1059c:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
      IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x000b); // disable timer interrupt
   105a0:	008000b4 	movhi	r2,2
   105a4:	14c40935 	stwio	r19,4132(r2)
      char *inc_msg = calloc(sizeof(char), 255);
   105a8:	01403fc4 	movi	r5,255
   105ac:	01000044 	movi	r4,1
      for (int i = 0; i < num_char; i++){
   105b0:	84003fcc 	andi	r16,r16,255
      char *inc_msg = calloc(sizeof(char), 255);
   105b4:	00108780 	call	10878 <calloc>
      for (int i = 0; i < num_char; i++){
   105b8:	8400201c 	xori	r16,r16,128
      char *inc_msg = calloc(sizeof(char), 255);
   105bc:	1023883a 	mov	r17,r2
      for (int i = 0; i < num_char; i++){
   105c0:	002b883a 	mov	r21,zero
   105c4:	843fe004 	addi	r16,r16,-128
   105c8:	ac001b16 	blt	r21,r16,10638 <main+0x1b4>
      memcpy(currMsg.text, inc_msg, (num_char + BLANK_SPACES) * sizeof(char)); // copy data
   105cc:	00800074 	movhi	r2,1
   105d0:	11055c17 	ldw	r4,5488(r2)
   105d4:	858000c4 	addi	r22,r16,3
   105d8:	b00d883a 	mov	r6,r22
   105dc:	880b883a 	mov	r5,r17
   105e0:	00108ac0 	call	108ac <memcpy>
   105e4:	05400074 	movhi	r21,1
      if (num_char > 6) currMsg.length = num_char + BLANK_SPACES; // add blanks
   105e8:	808001d0 	cmplti	r2,r16,7
      memcpy(currMsg.text, inc_msg, (num_char + BLANK_SPACES) * sizeof(char)); // copy data
   105ec:	ad455c04 	addi	r21,r21,5488
      if (num_char > 6) currMsg.length = num_char + BLANK_SPACES; // add blanks
   105f0:	10001d1e 	bne	r2,zero,10668 <main+0x1e4>
   105f4:	ad800115 	stw	r22,4(r21)
      currMsg.loopCount = 0;
   105f8:	00800074 	movhi	r2,1
      free(inc_msg);
   105fc:	8809883a 	mov	r4,r17
      currMsg.loopCount = 0;
   10600:	10055e15 	stw	zero,5496(r2)
      free(inc_msg);
   10604:	001089c0 	call	1089c <free>
      alt_up_accelerometer_spi_write(acc_dev, 0x2E, 0b01000000); // enable single tap to generate interrupts
   10608:	d1207317 	ldw	r4,-32308(gp)
   1060c:	01801004 	movi	r6,64
   10610:	01400b84 	movi	r5,46
   10614:	0010e340 	call	10e34 <alt_up_accelerometer_spi_write>
      IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x0007); // 0b...1011; start the timer up again
   10618:	008000b4 	movhi	r2,2
   1061c:	15040935 	stwio	r20,4132(r2)
    usleep(10000);
   10620:	0109c404 	movi	r4,10000
   10624:	0010dc40 	call	10dc4 <usleep>
    if (newTapData) IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, send_spi | 0x8000);
   10628:	003fc706 	br	10548 <main+0xc4>
    else IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, 0 );
   1062c:	008000b4 	movhi	r2,2
   10630:	10040135 	stwio	zero,4100(r2)
   10634:	003fcb06 	br	10564 <main+0xe0>
        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, 0 ); // write nothing just to get resposne
   10638:	008000b4 	movhi	r2,2
   1063c:	10040135 	stwio	zero,4100(r2)
        usleep(75); // wait for resposne
   10640:	010012c4 	movi	r4,75
   10644:	0010dc40 	call	10dc4 <usleep>
        rcvd_spi = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE); // read data
   10648:	008000b4 	movhi	r2,2
   1064c:	15840037 	ldwio	r22,4096(r2)
        usleep(75); // wait a bit IMPORTANT!!!! FOR SOME REASON
   10650:	010012c4 	movi	r4,75
   10654:	0010dc40 	call	10dc4 <usleep>
        inc_msg[i] = rcvd_spi;// save char 
   10658:	8d45883a 	add	r2,r17,r21
   1065c:	15800005 	stb	r22,0(r2)
      for (int i = 0; i < num_char; i++){
   10660:	ad400044 	addi	r21,r21,1
   10664:	003fd806 	br	105c8 <main+0x144>
      else currMsg.length = num_char;
   10668:	ac000115 	stw	r16,4(r21)
   1066c:	003fe206 	br	105f8 <main+0x174>
}
   10670:	00800044 	movi	r2,1
   10674:	dfc00717 	ldw	ra,28(sp)
   10678:	dd800617 	ldw	r22,24(sp)
   1067c:	dd400517 	ldw	r21,20(sp)
   10680:	dd000417 	ldw	r20,16(sp)
   10684:	dcc00317 	ldw	r19,12(sp)
   10688:	dc800217 	ldw	r18,8(sp)
   1068c:	dc400117 	ldw	r17,4(sp)
   10690:	dc000017 	ldw	r16,0(sp)
   10694:	dec00804 	addi	sp,sp,32
   10698:	f800283a 	ret

0001069c <__divsi3>:
   1069c:	20001a16 	blt	r4,zero,10708 <__divsi3+0x6c>
   106a0:	000f883a 	mov	r7,zero
   106a4:	2800020e 	bge	r5,zero,106b0 <__divsi3+0x14>
   106a8:	014bc83a 	sub	r5,zero,r5
   106ac:	39c0005c 	xori	r7,r7,1
   106b0:	200d883a 	mov	r6,r4
   106b4:	00c00044 	movi	r3,1
   106b8:	2900092e 	bgeu	r5,r4,106e0 <__divsi3+0x44>
   106bc:	00800804 	movi	r2,32
   106c0:	00c00044 	movi	r3,1
   106c4:	00000106 	br	106cc <__divsi3+0x30>
   106c8:	10001226 	beq	r2,zero,10714 <__divsi3+0x78>
   106cc:	294b883a 	add	r5,r5,r5
   106d0:	10bfffc4 	addi	r2,r2,-1
   106d4:	18c7883a 	add	r3,r3,r3
   106d8:	293ffb36 	bltu	r5,r4,106c8 <__divsi3+0x2c>
   106dc:	18000d26 	beq	r3,zero,10714 <__divsi3+0x78>
   106e0:	0005883a 	mov	r2,zero
   106e4:	31400236 	bltu	r6,r5,106f0 <__divsi3+0x54>
   106e8:	314dc83a 	sub	r6,r6,r5
   106ec:	10c4b03a 	or	r2,r2,r3
   106f0:	1806d07a 	srli	r3,r3,1
   106f4:	280ad07a 	srli	r5,r5,1
   106f8:	183ffa1e 	bne	r3,zero,106e4 <__divsi3+0x48>
   106fc:	38000126 	beq	r7,zero,10704 <__divsi3+0x68>
   10700:	0085c83a 	sub	r2,zero,r2
   10704:	f800283a 	ret
   10708:	0109c83a 	sub	r4,zero,r4
   1070c:	01c00044 	movi	r7,1
   10710:	003fe406 	br	106a4 <__divsi3+0x8>
   10714:	0005883a 	mov	r2,zero
   10718:	003ff806 	br	106fc <__divsi3+0x60>

0001071c <__modsi3>:
   1071c:	20001916 	blt	r4,zero,10784 <__modsi3+0x68>
   10720:	000f883a 	mov	r7,zero
   10724:	2005883a 	mov	r2,r4
   10728:	2800010e 	bge	r5,zero,10730 <__modsi3+0x14>
   1072c:	014bc83a 	sub	r5,zero,r5
   10730:	00c00044 	movi	r3,1
   10734:	2900092e 	bgeu	r5,r4,1075c <__modsi3+0x40>
   10738:	01800804 	movi	r6,32
   1073c:	00c00044 	movi	r3,1
   10740:	00000106 	br	10748 <__modsi3+0x2c>
   10744:	30000d26 	beq	r6,zero,1077c <__modsi3+0x60>
   10748:	294b883a 	add	r5,r5,r5
   1074c:	31bfffc4 	addi	r6,r6,-1
   10750:	18c7883a 	add	r3,r3,r3
   10754:	293ffb36 	bltu	r5,r4,10744 <__modsi3+0x28>
   10758:	18000826 	beq	r3,zero,1077c <__modsi3+0x60>
   1075c:	1806d07a 	srli	r3,r3,1
   10760:	11400136 	bltu	r2,r5,10768 <__modsi3+0x4c>
   10764:	1145c83a 	sub	r2,r2,r5
   10768:	280ad07a 	srli	r5,r5,1
   1076c:	183ffb1e 	bne	r3,zero,1075c <__modsi3+0x40>
   10770:	38000126 	beq	r7,zero,10778 <__modsi3+0x5c>
   10774:	0085c83a 	sub	r2,zero,r2
   10778:	f800283a 	ret
   1077c:	2005883a 	mov	r2,r4
   10780:	003ffb06 	br	10770 <__modsi3+0x54>
   10784:	0109c83a 	sub	r4,zero,r4
   10788:	01c00044 	movi	r7,1
   1078c:	003fe506 	br	10724 <__modsi3+0x8>

00010790 <__udivsi3>:
   10790:	200d883a 	mov	r6,r4
   10794:	2900152e 	bgeu	r5,r4,107ec <__udivsi3+0x5c>
   10798:	28001416 	blt	r5,zero,107ec <__udivsi3+0x5c>
   1079c:	00800804 	movi	r2,32
   107a0:	00c00044 	movi	r3,1
   107a4:	00000206 	br	107b0 <__udivsi3+0x20>
   107a8:	10000e26 	beq	r2,zero,107e4 <__udivsi3+0x54>
   107ac:	28000516 	blt	r5,zero,107c4 <__udivsi3+0x34>
   107b0:	294b883a 	add	r5,r5,r5
   107b4:	10bfffc4 	addi	r2,r2,-1
   107b8:	18c7883a 	add	r3,r3,r3
   107bc:	293ffa36 	bltu	r5,r4,107a8 <__udivsi3+0x18>
   107c0:	18000826 	beq	r3,zero,107e4 <__udivsi3+0x54>
   107c4:	0005883a 	mov	r2,zero
   107c8:	31400236 	bltu	r6,r5,107d4 <__udivsi3+0x44>
   107cc:	314dc83a 	sub	r6,r6,r5
   107d0:	10c4b03a 	or	r2,r2,r3
   107d4:	1806d07a 	srli	r3,r3,1
   107d8:	280ad07a 	srli	r5,r5,1
   107dc:	183ffa1e 	bne	r3,zero,107c8 <__udivsi3+0x38>
   107e0:	f800283a 	ret
   107e4:	0005883a 	mov	r2,zero
   107e8:	f800283a 	ret
   107ec:	00c00044 	movi	r3,1
   107f0:	003ff406 	br	107c4 <__udivsi3+0x34>

000107f4 <__umodsi3>:
   107f4:	2005883a 	mov	r2,r4
   107f8:	2900132e 	bgeu	r5,r4,10848 <__umodsi3+0x54>
   107fc:	28001216 	blt	r5,zero,10848 <__umodsi3+0x54>
   10800:	01800804 	movi	r6,32
   10804:	00c00044 	movi	r3,1
   10808:	00000206 	br	10814 <__umodsi3+0x20>
   1080c:	30000c26 	beq	r6,zero,10840 <__umodsi3+0x4c>
   10810:	28000516 	blt	r5,zero,10828 <__umodsi3+0x34>
   10814:	294b883a 	add	r5,r5,r5
   10818:	31bfffc4 	addi	r6,r6,-1
   1081c:	18c7883a 	add	r3,r3,r3
   10820:	293ffa36 	bltu	r5,r4,1080c <__umodsi3+0x18>
   10824:	18000626 	beq	r3,zero,10840 <__umodsi3+0x4c>
   10828:	1806d07a 	srli	r3,r3,1
   1082c:	11400136 	bltu	r2,r5,10834 <__umodsi3+0x40>
   10830:	1145c83a 	sub	r2,r2,r5
   10834:	280ad07a 	srli	r5,r5,1
   10838:	183ffb1e 	bne	r3,zero,10828 <__umodsi3+0x34>
   1083c:	f800283a 	ret
   10840:	2005883a 	mov	r2,r4
   10844:	f800283a 	ret
   10848:	00c00044 	movi	r3,1
   1084c:	003ff606 	br	10828 <__umodsi3+0x34>

00010850 <__mulsi3>:
   10850:	0005883a 	mov	r2,zero
   10854:	20000726 	beq	r4,zero,10874 <__mulsi3+0x24>
   10858:	20c0004c 	andi	r3,r4,1
   1085c:	2008d07a 	srli	r4,r4,1
   10860:	18000126 	beq	r3,zero,10868 <__mulsi3+0x18>
   10864:	1145883a 	add	r2,r2,r5
   10868:	294b883a 	add	r5,r5,r5
   1086c:	203ffa1e 	bne	r4,zero,10858 <__mulsi3+0x8>
   10870:	f800283a 	ret
   10874:	f800283a 	ret

00010878 <calloc>:
   10878:	00800074 	movhi	r2,1
   1087c:	280d883a 	mov	r6,r5
   10880:	200b883a 	mov	r5,r4
   10884:	1104e117 	ldw	r4,4996(r2)
   10888:	00108d41 	jmpi	108d4 <_calloc_r>

0001088c <malloc>:
   1088c:	00800074 	movhi	r2,1
   10890:	200b883a 	mov	r5,r4
   10894:	1104e117 	ldw	r4,4996(r2)
   10898:	0010a341 	jmpi	10a34 <_malloc_r>

0001089c <free>:
   1089c:	00800074 	movhi	r2,1
   108a0:	200b883a 	mov	r5,r4
   108a4:	1104e117 	ldw	r4,4996(r2)
   108a8:	00109341 	jmpi	10934 <_free_r>

000108ac <memcpy>:
   108ac:	2005883a 	mov	r2,r4
   108b0:	0007883a 	mov	r3,zero
   108b4:	30c0011e 	bne	r6,r3,108bc <memcpy+0x10>
   108b8:	f800283a 	ret
   108bc:	28cf883a 	add	r7,r5,r3
   108c0:	39c00003 	ldbu	r7,0(r7)
   108c4:	10c9883a 	add	r4,r2,r3
   108c8:	18c00044 	addi	r3,r3,1
   108cc:	21c00005 	stb	r7,0(r4)
   108d0:	003ff806 	br	108b4 <memcpy+0x8>

000108d4 <_calloc_r>:
   108d4:	defffd04 	addi	sp,sp,-12
   108d8:	dc400115 	stw	r17,4(sp)
   108dc:	2023883a 	mov	r17,r4
   108e0:	2809883a 	mov	r4,r5
   108e4:	300b883a 	mov	r5,r6
   108e8:	dfc00215 	stw	ra,8(sp)
   108ec:	dc000015 	stw	r16,0(sp)
   108f0:	00108500 	call	10850 <__mulsi3>
   108f4:	8809883a 	mov	r4,r17
   108f8:	100b883a 	mov	r5,r2
   108fc:	1021883a 	mov	r16,r2
   10900:	0010a340 	call	10a34 <_malloc_r>
   10904:	1009883a 	mov	r4,r2
   10908:	10000426 	beq	r2,zero,1091c <_calloc_r+0x48>
   1090c:	800d883a 	mov	r6,r16
   10910:	000b883a 	mov	r5,zero
   10914:	0010be00 	call	10be0 <memset>
   10918:	1009883a 	mov	r4,r2
   1091c:	2005883a 	mov	r2,r4
   10920:	dfc00217 	ldw	ra,8(sp)
   10924:	dc400117 	ldw	r17,4(sp)
   10928:	dc000017 	ldw	r16,0(sp)
   1092c:	dec00304 	addi	sp,sp,12
   10930:	f800283a 	ret

00010934 <_free_r>:
   10934:	28003e26 	beq	r5,zero,10a30 <_free_r+0xfc>
   10938:	28bfff17 	ldw	r2,-4(r5)
   1093c:	defffd04 	addi	sp,sp,-12
   10940:	dc000115 	stw	r16,4(sp)
   10944:	dfc00215 	stw	ra,8(sp)
   10948:	2c3fff04 	addi	r16,r5,-4
   1094c:	1000010e 	bge	r2,zero,10954 <_free_r+0x20>
   10950:	80a1883a 	add	r16,r16,r2
   10954:	d9000015 	stw	r4,0(sp)
   10958:	0010d700 	call	10d70 <__malloc_lock>
   1095c:	00800074 	movhi	r2,1
   10960:	10855517 	ldw	r2,5460(r2)
   10964:	d9000017 	ldw	r4,0(sp)
   10968:	1000071e 	bne	r2,zero,10988 <_free_r+0x54>
   1096c:	80000115 	stw	zero,4(r16)
   10970:	00800074 	movhi	r2,1
   10974:	14055515 	stw	r16,5460(r2)
   10978:	dfc00217 	ldw	ra,8(sp)
   1097c:	dc000117 	ldw	r16,4(sp)
   10980:	dec00304 	addi	sp,sp,12
   10984:	0010d741 	jmpi	10d74 <__malloc_unlock>
   10988:	8080092e 	bgeu	r16,r2,109b0 <_free_r+0x7c>
   1098c:	81400017 	ldw	r5,0(r16)
   10990:	8147883a 	add	r3,r16,r5
   10994:	10c0041e 	bne	r2,r3,109a8 <_free_r+0x74>
   10998:	10c00017 	ldw	r3,0(r2)
   1099c:	10800117 	ldw	r2,4(r2)
   109a0:	1947883a 	add	r3,r3,r5
   109a4:	80c00015 	stw	r3,0(r16)
   109a8:	80800115 	stw	r2,4(r16)
   109ac:	003ff006 	br	10970 <_free_r+0x3c>
   109b0:	1007883a 	mov	r3,r2
   109b4:	10800117 	ldw	r2,4(r2)
   109b8:	10000126 	beq	r2,zero,109c0 <_free_r+0x8c>
   109bc:	80bffc2e 	bgeu	r16,r2,109b0 <_free_r+0x7c>
   109c0:	19400017 	ldw	r5,0(r3)
   109c4:	194d883a 	add	r6,r3,r5
   109c8:	34000b1e 	bne	r6,r16,109f8 <_free_r+0xc4>
   109cc:	81800017 	ldw	r6,0(r16)
   109d0:	298b883a 	add	r5,r5,r6
   109d4:	19400015 	stw	r5,0(r3)
   109d8:	194d883a 	add	r6,r3,r5
   109dc:	11bfe61e 	bne	r2,r6,10978 <_free_r+0x44>
   109e0:	11800017 	ldw	r6,0(r2)
   109e4:	10800117 	ldw	r2,4(r2)
   109e8:	314b883a 	add	r5,r6,r5
   109ec:	19400015 	stw	r5,0(r3)
   109f0:	18800115 	stw	r2,4(r3)
   109f4:	003fe006 	br	10978 <_free_r+0x44>
   109f8:	8180032e 	bgeu	r16,r6,10a08 <_free_r+0xd4>
   109fc:	00800304 	movi	r2,12
   10a00:	20800015 	stw	r2,0(r4)
   10a04:	003fdc06 	br	10978 <_free_r+0x44>
   10a08:	81800017 	ldw	r6,0(r16)
   10a0c:	818b883a 	add	r5,r16,r6
   10a10:	1140041e 	bne	r2,r5,10a24 <_free_r+0xf0>
   10a14:	11400017 	ldw	r5,0(r2)
   10a18:	10800117 	ldw	r2,4(r2)
   10a1c:	298b883a 	add	r5,r5,r6
   10a20:	81400015 	stw	r5,0(r16)
   10a24:	80800115 	stw	r2,4(r16)
   10a28:	1c000115 	stw	r16,4(r3)
   10a2c:	003fd206 	br	10978 <_free_r+0x44>
   10a30:	f800283a 	ret

00010a34 <_malloc_r>:
   10a34:	defffc04 	addi	sp,sp,-16
   10a38:	00bfff04 	movi	r2,-4
   10a3c:	dc400115 	stw	r17,4(sp)
   10a40:	2c4000c4 	addi	r17,r5,3
   10a44:	88a2703a 	and	r17,r17,r2
   10a48:	8c400204 	addi	r17,r17,8
   10a4c:	dc800215 	stw	r18,8(sp)
   10a50:	dfc00315 	stw	ra,12(sp)
   10a54:	dc000015 	stw	r16,0(sp)
   10a58:	88800328 	cmpgeui	r2,r17,12
   10a5c:	2025883a 	mov	r18,r4
   10a60:	10001b1e 	bne	r2,zero,10ad0 <_malloc_r+0x9c>
   10a64:	04400304 	movi	r17,12
   10a68:	89401a36 	bltu	r17,r5,10ad4 <_malloc_r+0xa0>
   10a6c:	9009883a 	mov	r4,r18
   10a70:	0010d700 	call	10d70 <__malloc_lock>
   10a74:	00800074 	movhi	r2,1
   10a78:	10c55517 	ldw	r3,5460(r2)
   10a7c:	1821883a 	mov	r16,r3
   10a80:	80001d1e 	bne	r16,zero,10af8 <_malloc_r+0xc4>
   10a84:	00800074 	movhi	r2,1
   10a88:	10855417 	ldw	r2,5456(r2)
   10a8c:	1000061e 	bne	r2,zero,10aa8 <_malloc_r+0x74>
   10a90:	00800074 	movhi	r2,1
   10a94:	11455417 	ldw	r5,5456(r2)
   10a98:	9009883a 	mov	r4,r18
   10a9c:	0010b980 	call	10b98 <_sbrk_r>
   10aa0:	00c00074 	movhi	r3,1
   10aa4:	18855415 	stw	r2,5456(r3)
   10aa8:	880b883a 	mov	r5,r17
   10aac:	9009883a 	mov	r4,r18
   10ab0:	0010b980 	call	10b98 <_sbrk_r>
   10ab4:	10ffffd8 	cmpnei	r3,r2,-1
   10ab8:	18002d1e 	bne	r3,zero,10b70 <_malloc_r+0x13c>
   10abc:	00800304 	movi	r2,12
   10ac0:	90800015 	stw	r2,0(r18)
   10ac4:	9009883a 	mov	r4,r18
   10ac8:	0010d740 	call	10d74 <__malloc_unlock>
   10acc:	00000306 	br	10adc <_malloc_r+0xa8>
   10ad0:	883fe50e 	bge	r17,zero,10a68 <_malloc_r+0x34>
   10ad4:	00800304 	movi	r2,12
   10ad8:	90800015 	stw	r2,0(r18)
   10adc:	0005883a 	mov	r2,zero
   10ae0:	dfc00317 	ldw	ra,12(sp)
   10ae4:	dc800217 	ldw	r18,8(sp)
   10ae8:	dc400117 	ldw	r17,4(sp)
   10aec:	dc000017 	ldw	r16,0(sp)
   10af0:	dec00404 	addi	sp,sp,16
   10af4:	f800283a 	ret
   10af8:	80800017 	ldw	r2,0(r16)
   10afc:	1445c83a 	sub	r2,r2,r17
   10b00:	10001816 	blt	r2,zero,10b64 <_malloc_r+0x130>
   10b04:	11000330 	cmpltui	r4,r2,12
   10b08:	2000041e 	bne	r4,zero,10b1c <_malloc_r+0xe8>
   10b0c:	80800015 	stw	r2,0(r16)
   10b10:	80a1883a 	add	r16,r16,r2
   10b14:	84400015 	stw	r17,0(r16)
   10b18:	00000406 	br	10b2c <_malloc_r+0xf8>
   10b1c:	80800117 	ldw	r2,4(r16)
   10b20:	1c000e1e 	bne	r3,r16,10b5c <_malloc_r+0x128>
   10b24:	00c00074 	movhi	r3,1
   10b28:	18855515 	stw	r2,5460(r3)
   10b2c:	9009883a 	mov	r4,r18
   10b30:	0010d740 	call	10d74 <__malloc_unlock>
   10b34:	013ffe04 	movi	r4,-8
   10b38:	808002c4 	addi	r2,r16,11
   10b3c:	80c00104 	addi	r3,r16,4
   10b40:	1104703a 	and	r2,r2,r4
   10b44:	10c9c83a 	sub	r4,r2,r3
   10b48:	10ffe526 	beq	r2,r3,10ae0 <_malloc_r+0xac>
   10b4c:	8121883a 	add	r16,r16,r4
   10b50:	1887c83a 	sub	r3,r3,r2
   10b54:	80c00015 	stw	r3,0(r16)
   10b58:	003fe106 	br	10ae0 <_malloc_r+0xac>
   10b5c:	18800115 	stw	r2,4(r3)
   10b60:	003ff206 	br	10b2c <_malloc_r+0xf8>
   10b64:	8007883a 	mov	r3,r16
   10b68:	84000117 	ldw	r16,4(r16)
   10b6c:	003fc406 	br	10a80 <_malloc_r+0x4c>
   10b70:	140000c4 	addi	r16,r2,3
   10b74:	00ffff04 	movi	r3,-4
   10b78:	80e0703a 	and	r16,r16,r3
   10b7c:	143fe526 	beq	r2,r16,10b14 <_malloc_r+0xe0>
   10b80:	808bc83a 	sub	r5,r16,r2
   10b84:	9009883a 	mov	r4,r18
   10b88:	0010b980 	call	10b98 <_sbrk_r>
   10b8c:	10bfffe0 	cmpeqi	r2,r2,-1
   10b90:	103fe026 	beq	r2,zero,10b14 <_malloc_r+0xe0>
   10b94:	003fc906 	br	10abc <_malloc_r+0x88>

00010b98 <_sbrk_r>:
   10b98:	defffe04 	addi	sp,sp,-8
   10b9c:	dc000015 	stw	r16,0(sp)
   10ba0:	00800074 	movhi	r2,1
   10ba4:	2021883a 	mov	r16,r4
   10ba8:	2809883a 	mov	r4,r5
   10bac:	dfc00115 	stw	ra,4(sp)
   10bb0:	10055615 	stw	zero,5464(r2)
   10bb4:	0010d780 	call	10d78 <sbrk>
   10bb8:	10ffffd8 	cmpnei	r3,r2,-1
   10bbc:	1800041e 	bne	r3,zero,10bd0 <_sbrk_r+0x38>
   10bc0:	00c00074 	movhi	r3,1
   10bc4:	18c55617 	ldw	r3,5464(r3)
   10bc8:	18000126 	beq	r3,zero,10bd0 <_sbrk_r+0x38>
   10bcc:	80c00015 	stw	r3,0(r16)
   10bd0:	dfc00117 	ldw	ra,4(sp)
   10bd4:	dc000017 	ldw	r16,0(sp)
   10bd8:	dec00204 	addi	sp,sp,8
   10bdc:	f800283a 	ret

00010be0 <memset>:
   10be0:	2005883a 	mov	r2,r4
   10be4:	218d883a 	add	r6,r4,r6
   10be8:	2007883a 	mov	r3,r4
   10bec:	1980011e 	bne	r3,r6,10bf4 <memset+0x14>
   10bf0:	f800283a 	ret
   10bf4:	18c00044 	addi	r3,r3,1
   10bf8:	197fffc5 	stb	r5,-1(r3)
   10bfc:	003ffb06 	br	10bec <memset+0xc>

00010c00 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10c00:	20800828 	cmpgeui	r2,r4,32
   10c04:	1000201e 	bne	r2,zero,10c88 <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
   10c08:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c0c:	00ffff84 	movi	r3,-2
   10c10:	38c4703a 	and	r2,r7,r3
   10c14:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10c18:	201090fa 	slli	r8,r4,3
   10c1c:	00800074 	movhi	r2,1
   10c20:	10855f04 	addi	r2,r2,5500
   10c24:	1205883a 	add	r2,r2,r8
   10c28:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10c2c:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10c30:	00800044 	movi	r2,1
   10c34:	1108983a 	sll	r4,r2,r4
   10c38:	30000c26 	beq	r6,zero,10c6c <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
   10c3c:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c40:	10c6703a 	and	r3,r2,r3
   10c44:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10c48:	d0e07717 	ldw	r3,-32292(gp)
   10c4c:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
   10c50:	d1207715 	stw	r4,-32292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c54:	d0e07717 	ldw	r3,-32292(gp)
   10c58:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
   10c5c:	1001703a 	wrctl	status,r2
   10c60:	3801703a 	wrctl	status,r7
   10c64:	0005883a 	mov	r2,zero
}
   10c68:	f800283a 	ret
  NIOS2_READ_STATUS (context);
   10c6c:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c70:	10c6703a 	and	r3,r2,r3
   10c74:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
   10c78:	d0e07717 	ldw	r3,-32292(gp)
   10c7c:	0108303a 	nor	r4,zero,r4
   10c80:	20c8703a 	and	r4,r4,r3
   10c84:	003ff206 	br	10c50 <alt_irq_register+0x50>
  int rc = -EINVAL;  
   10c88:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
   10c8c:	f800283a 	ret

00010c90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10c90:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10c94:	00800074 	movhi	r2,1
   10c98:	00c00074 	movhi	r3,1
   10c9c:	dfc00015 	stw	ra,0(sp)
   10ca0:	10848604 	addi	r2,r2,4632
   10ca4:	18c4eb04 	addi	r3,r3,5036
   10ca8:	10c00326 	beq	r2,r3,10cb8 <alt_load+0x28>
  {
    while( to != end )
   10cac:	01000074 	movhi	r4,1
   10cb0:	2104eb04 	addi	r4,r4,5036
   10cb4:	1100141e 	bne	r2,r4,10d08 <alt_load+0x78>
  if (to != from)
   10cb8:	00800074 	movhi	r2,1
   10cbc:	00c00074 	movhi	r3,1
   10cc0:	10800804 	addi	r2,r2,32
   10cc4:	18c00804 	addi	r3,r3,32
   10cc8:	10c00326 	beq	r2,r3,10cd8 <alt_load+0x48>
    while( to != end )
   10ccc:	01000074 	movhi	r4,1
   10cd0:	21006004 	addi	r4,r4,384
   10cd4:	1100111e 	bne	r2,r4,10d1c <alt_load+0x8c>
  if (to != from)
   10cd8:	00800074 	movhi	r2,1
   10cdc:	00c00074 	movhi	r3,1
   10ce0:	10847004 	addi	r2,r2,4544
   10ce4:	18c47004 	addi	r3,r3,4544
   10ce8:	10c00326 	beq	r2,r3,10cf8 <alt_load+0x68>
    while( to != end )
   10cec:	01000074 	movhi	r4,1
   10cf0:	21048604 	addi	r4,r4,4632
   10cf4:	11000e1e 	bne	r2,r4,10d30 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10cf8:	00110100 	call	11010 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10cfc:	dfc00017 	ldw	ra,0(sp)
   10d00:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   10d04:	00110f81 	jmpi	110f8 <alt_icache_flush_all>
    {
      *to++ = *from++;
   10d08:	19400017 	ldw	r5,0(r3)
   10d0c:	10800104 	addi	r2,r2,4
   10d10:	18c00104 	addi	r3,r3,4
   10d14:	117fff15 	stw	r5,-4(r2)
   10d18:	003fe606 	br	10cb4 <alt_load+0x24>
   10d1c:	19400017 	ldw	r5,0(r3)
   10d20:	10800104 	addi	r2,r2,4
   10d24:	18c00104 	addi	r3,r3,4
   10d28:	117fff15 	stw	r5,-4(r2)
   10d2c:	003fe906 	br	10cd4 <alt_load+0x44>
   10d30:	19400017 	ldw	r5,0(r3)
   10d34:	10800104 	addi	r2,r2,4
   10d38:	18c00104 	addi	r3,r3,4
   10d3c:	117fff15 	stw	r5,-4(r2)
   10d40:	003fec06 	br	10cf4 <alt_load+0x64>

00010d44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d44:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d48:	0009883a 	mov	r4,zero
{
   10d4c:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   10d50:	0010dc80 	call	10dc8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d54:	0010de80 	call	10de8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d58:	d1a07817 	ldw	r6,-32288(gp)
   10d5c:	d1607917 	ldw	r5,-32284(gp)
   10d60:	d1207a17 	ldw	r4,-32280(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10d64:	dfc00017 	ldw	ra,0(sp)
   10d68:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   10d6c:	00104841 	jmpi	10484 <main>

00010d70 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   10d70:	f800283a 	ret

00010d74 <__malloc_unlock>:
   10d74:	f800283a 	ret

00010d78 <sbrk>:
  NIOS2_READ_STATUS (context);
   10d78:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d7c:	00bfff84 	movi	r2,-2
   10d80:	1884703a 	and	r2,r3,r2
   10d84:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10d88:	d0a00317 	ldw	r2,-32756(gp)
   10d8c:	017fff04 	movi	r5,-4
   10d90:	108000c4 	addi	r2,r2,3
   10d94:	1144703a 	and	r2,r2,r5
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10d98:	014000b4 	movhi	r5,2
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10d9c:	d0a00315 	stw	r2,-32756(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
   10da0:	1109883a 	add	r4,r2,r4
   10da4:	29400004 	addi	r5,r5,0
   10da8:	2900032e 	bgeu	r5,r4,10db8 <sbrk+0x40>
  NIOS2_WRITE_STATUS (context);
   10dac:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10db0:	00bfffc4 	movi	r2,-1
   10db4:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   10db8:	d1200315 	stw	r4,-32756(gp)
   10dbc:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   10dc0:	f800283a 	ret

00010dc4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   10dc4:	0010f641 	jmpi	10f64 <alt_busy_sleep>

00010dc8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10dc8:	deffff04 	addi	sp,sp,-4
   10dcc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10dd0:	00110fc0 	call	110fc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10dd4:	00800044 	movi	r2,1
   10dd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10ddc:	dfc00017 	ldw	ra,0(sp)
   10de0:	dec00104 	addi	sp,sp,4
   10de4:	f800283a 	ret

00010de8 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10de8:	01000074 	movhi	r4,1
   10dec:	d1600604 	addi	r5,gp,-32744
   10df0:	2104bf04 	addi	r4,r4,4860
   10df4:	001101c1 	jmpi	1101c <alt_dev_llist_insert>

00010df8 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10df8:	d1600604 	addi	r5,gp,-32744
   10dfc:	00110881 	jmpi	11088 <alt_find_dev>

00010e00 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10e00:	20800a17 	ldw	r2,40(r4)
   10e04:	10800023 	ldbuio	r2,0(r2)
   10e08:	28800005 	stb	r2,0(r5)

	return 0;
}
   10e0c:	0005883a 	mov	r2,zero
   10e10:	f800283a 	ret

00010e14 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e14:	20800a17 	ldw	r2,40(r4)
   10e18:	29400fcc 	andi	r5,r5,63
   10e1c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10e20:	20800a17 	ldw	r2,40(r4)
   10e24:	10800063 	ldbuio	r2,1(r2)
   10e28:	30800005 	stb	r2,0(r6)

	return 0;
}
   10e2c:	0005883a 	mov	r2,zero
   10e30:	f800283a 	ret

00010e34 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e34:	20800a17 	ldw	r2,40(r4)
   10e38:	29400fcc 	andi	r5,r5,63
   10e3c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10e40:	20800a17 	ldw	r2,40(r4)
   10e44:	11800065 	stbio	r6,1(r2)

	return 0;
}
   10e48:	0005883a 	mov	r2,zero
   10e4c:	f800283a 	ret

00010e50 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e50:	20800a17 	ldw	r2,40(r4)
   10e54:	00c00c84 	movi	r3,50
   10e58:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10e5c:	20800a17 	ldw	r2,40(r4)
   10e60:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e64:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10e68:	10803fcc 	andi	r2,r2,255
   10e6c:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e70:	20800a17 	ldw	r2,40(r4)
   10e74:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10e78:	20800a17 	ldw	r2,40(r4)
   10e7c:	10800063 	ldbuio	r2,1(r2)
   10e80:	10803fcc 	andi	r2,r2,255
   10e84:	28c00017 	ldw	r3,0(r5)
   10e88:	1004923a 	slli	r2,r2,8
   10e8c:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   10e90:	10e0000c 	andi	r3,r2,32768
   10e94:	1800031e 	bne	r3,zero,10ea4 <alt_up_accelerometer_spi_read_x_axis+0x54>
	{
		*(x_axis) |= 0xFFFF0000;
   10e98:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10e9c:	0005883a 	mov	r2,zero
   10ea0:	f800283a 	ret
		*(x_axis) |= 0xFFFF0000;
   10ea4:	10bffff4 	orhi	r2,r2,65535
   10ea8:	003ffb06 	br	10e98 <alt_up_accelerometer_spi_read_x_axis+0x48>

00010eac <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10eac:	20800a17 	ldw	r2,40(r4)
   10eb0:	00c00d04 	movi	r3,52
   10eb4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10eb8:	20800a17 	ldw	r2,40(r4)
   10ebc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10ec0:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10ec4:	10803fcc 	andi	r2,r2,255
   10ec8:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10ecc:	20800a17 	ldw	r2,40(r4)
   10ed0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10ed4:	20800a17 	ldw	r2,40(r4)
   10ed8:	10800063 	ldbuio	r2,1(r2)
   10edc:	10803fcc 	andi	r2,r2,255
   10ee0:	28c00017 	ldw	r3,0(r5)
   10ee4:	1004923a 	slli	r2,r2,8
   10ee8:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   10eec:	10e0000c 	andi	r3,r2,32768
   10ef0:	1800031e 	bne	r3,zero,10f00 <alt_up_accelerometer_spi_read_y_axis+0x54>
	{
		*(y_axis) |= 0xFFFF0000;
   10ef4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10ef8:	0005883a 	mov	r2,zero
   10efc:	f800283a 	ret
		*(y_axis) |= 0xFFFF0000;
   10f00:	10bffff4 	orhi	r2,r2,65535
   10f04:	003ffb06 	br	10ef4 <alt_up_accelerometer_spi_read_y_axis+0x48>

00010f08 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f08:	20800a17 	ldw	r2,40(r4)
   10f0c:	00c00d84 	movi	r3,54
   10f10:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10f14:	20800a17 	ldw	r2,40(r4)
   10f18:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f1c:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10f20:	10803fcc 	andi	r2,r2,255
   10f24:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f28:	20800a17 	ldw	r2,40(r4)
   10f2c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10f30:	20800a17 	ldw	r2,40(r4)
   10f34:	10800063 	ldbuio	r2,1(r2)
   10f38:	10803fcc 	andi	r2,r2,255
   10f3c:	28c00017 	ldw	r3,0(r5)
   10f40:	1004923a 	slli	r2,r2,8
   10f44:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   10f48:	10e0000c 	andi	r3,r2,32768
   10f4c:	1800031e 	bne	r3,zero,10f5c <alt_up_accelerometer_spi_read_z_axis+0x54>
	{
		*(z_axis) |= 0xFFFF0000;
   10f50:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10f54:	0005883a 	mov	r2,zero
   10f58:	f800283a 	ret
		*(z_axis) |= 0xFFFF0000;
   10f5c:	10bffff4 	orhi	r2,r2,65535
   10f60:	003ffb06 	br	10f50 <alt_up_accelerometer_spi_read_z_axis+0x48>

00010f64 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10f64:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10f68:	008666b4 	movhi	r2,6554
{
   10f6c:	dc000015 	stw	r16,0(sp)
   10f70:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
   10f74:	10a66604 	addi	r2,r2,-26216
{
   10f78:	2021883a 	mov	r16,r4
  if (big_loops)
   10f7c:	11001f2e 	bgeu	r2,r4,10ffc <alt_busy_sleep+0x98>
  big_loops = us / (INT_MAX/
   10f80:	014666b4 	movhi	r5,6554
   10f84:	29666644 	addi	r5,r5,-26215
   10f88:	00107900 	call	10790 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10f8c:	00e00034 	movhi	r3,32768
  big_loops = us / (INT_MAX/
   10f90:	1009883a 	mov	r4,r2
      __asm__ volatile (
   10f94:	18ffffc4 	addi	r3,r3,-1
    for(i=0;i<big_loops;i++)
   10f98:	0005883a 	mov	r2,zero
      __asm__ volatile (
   10f9c:	18ffffc4 	addi	r3,r3,-1
   10fa0:	183ffe1e 	bne	r3,zero,10f9c <alt_busy_sleep+0x38>
    for(i=0;i<big_loops;i++)
   10fa4:	10800044 	addi	r2,r2,1
   10fa8:	113ffc16 	blt	r2,r4,10f9c <alt_busy_sleep+0x38>
   10fac:	017999b4 	movhi	r5,58982
   10fb0:	295999c4 	addi	r5,r5,26215
   10fb4:	8161883a 	add	r16,r16,r5
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10fb8:	01000e0e 	bge	zero,r4,10ff4 <alt_busy_sleep+0x90>
   10fbc:	00108500 	call	10850 <__mulsi3>
   10fc0:	00c666b4 	movhi	r3,6554
   10fc4:	18e66644 	addi	r3,r3,-26215
   10fc8:	10c5883a 	add	r2,r2,r3
   10fcc:	1421883a 	add	r16,r2,r16
   10fd0:	800490ba 	slli	r2,r16,2
   10fd4:	1421883a 	add	r16,r2,r16
    __asm__ volatile (
   10fd8:	843fffc4 	addi	r16,r16,-1
   10fdc:	803ffe1e 	bne	r16,zero,10fd8 <alt_busy_sleep+0x74>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10fe0:	0005883a 	mov	r2,zero
   10fe4:	dfc00117 	ldw	ra,4(sp)
   10fe8:	dc000017 	ldw	r16,0(sp)
   10fec:	dec00204 	addi	sp,sp,8
   10ff0:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10ff4:	0005883a 	mov	r2,zero
   10ff8:	003ff406 	br	10fcc <alt_busy_sleep+0x68>
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10ffc:	200890ba 	slli	r4,r4,2
   11000:	2421883a 	add	r16,r4,r16
    __asm__ volatile (
   11004:	843fffc4 	addi	r16,r16,-1
   11008:	043ffe16 	blt	zero,r16,11004 <alt_busy_sleep+0xa0>
   1100c:	003ff406 	br	10fe0 <alt_busy_sleep+0x7c>

00011010 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11010:	f800283a 	ret

00011014 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11014:	3005883a 	mov	r2,r6
  return len;
}
   11018:	f800283a 	ret

0001101c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1101c:	20000226 	beq	r4,zero,11028 <alt_dev_llist_insert+0xc>
   11020:	20800217 	ldw	r2,8(r4)
   11024:	10000b1e 	bne	r2,zero,11054 <alt_dev_llist_insert+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11028:	d0a00a17 	ldw	r2,-32728(gp)
   1102c:	10001126 	beq	r2,zero,11074 <alt_dev_llist_insert+0x58>
{
   11030:	deffff04 	addi	sp,sp,-4
   11034:	dfc00015 	stw	ra,0(sp)
   11038:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   1103c:	00c00584 	movi	r3,22
   11040:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11044:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11048:	dfc00017 	ldw	ra,0(sp)
   1104c:	dec00104 	addi	sp,sp,4
   11050:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11054:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   11058:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   1105c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11060:	28800017 	ldw	r2,0(r5)
   11064:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11068:	29000015 	stw	r4,0(r5)
  return 0;  
   1106c:	0005883a 	mov	r2,zero
   11070:	f800283a 	ret
   11074:	d0a07604 	addi	r2,gp,-32296
    ALT_ERRNO = EINVAL;
   11078:	00c00584 	movi	r3,22
   1107c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11080:	00bffa84 	movi	r2,-22
}
   11084:	f800283a 	ret

00011088 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11088:	defffb04 	addi	sp,sp,-20
   1108c:	dcc00315 	stw	r19,12(sp)
   11090:	dc800215 	stw	r18,8(sp)
   11094:	dc400115 	stw	r17,4(sp)
   11098:	dc000015 	stw	r16,0(sp)
   1109c:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   110a0:	2c000017 	ldw	r16,0(r5)
{
   110a4:	2027883a 	mov	r19,r4
   110a8:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   110ac:	00111a40 	call	111a4 <strlen>
   110b0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   110b4:	8440091e 	bne	r16,r17,110dc <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   110b8:	0021883a 	mov	r16,zero
}
   110bc:	8005883a 	mov	r2,r16
   110c0:	dfc00417 	ldw	ra,16(sp)
   110c4:	dcc00317 	ldw	r19,12(sp)
   110c8:	dc800217 	ldw	r18,8(sp)
   110cc:	dc400117 	ldw	r17,4(sp)
   110d0:	dc000017 	ldw	r16,0(sp)
   110d4:	dec00504 	addi	sp,sp,20
   110d8:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   110dc:	81000217 	ldw	r4,8(r16)
   110e0:	900d883a 	mov	r6,r18
   110e4:	980b883a 	mov	r5,r19
   110e8:	00111740 	call	11174 <memcmp>
   110ec:	103ff326 	beq	r2,zero,110bc <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   110f0:	84000017 	ldw	r16,0(r16)
   110f4:	003fef06 	br	110b4 <alt_find_dev+0x2c>

000110f8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   110f8:	f800283a 	ret

000110fc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   110fc:	000170fa 	wrctl	ienable,zero
}
   11100:	f800283a 	ret

00011104 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11104:	213ffe84 	addi	r4,r4,-6
   11108:	20800428 	cmpgeui	r2,r4,16
   1110c:	1000151e 	bne	r2,zero,11164 <alt_exception_cause_generated_bad_addr+0x60>
   11110:	200890ba 	slli	r4,r4,2
   11114:	00800074 	movhi	r2,1
   11118:	2085883a 	add	r2,r4,r2
   1111c:	10844917 	ldw	r2,4388(r2)
   11120:	1000683a 	jmp	r2
   11124:	0001116c 	andhi	zero,zero,1093
   11128:	0001116c 	andhi	zero,zero,1093
   1112c:	00011164 	muli	zero,zero,1093
   11130:	00011164 	muli	zero,zero,1093
   11134:	00011164 	muli	zero,zero,1093
   11138:	0001116c 	andhi	zero,zero,1093
   1113c:	00011164 	muli	zero,zero,1093
   11140:	00011164 	muli	zero,zero,1093
   11144:	0001116c 	andhi	zero,zero,1093
   11148:	0001116c 	andhi	zero,zero,1093
   1114c:	00011164 	muli	zero,zero,1093
   11150:	0001116c 	andhi	zero,zero,1093
   11154:	00011164 	muli	zero,zero,1093
   11158:	00011164 	muli	zero,zero,1093
   1115c:	00011164 	muli	zero,zero,1093
   11160:	0001116c 	andhi	zero,zero,1093
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11164:	0005883a 	mov	r2,zero
   11168:	f800283a 	ret
   1116c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11170:	f800283a 	ret

00011174 <memcmp>:
   11174:	0007883a 	mov	r3,zero
   11178:	30c0021e 	bne	r6,r3,11184 <memcmp+0x10>
   1117c:	0005883a 	mov	r2,zero
   11180:	f800283a 	ret
   11184:	20c5883a 	add	r2,r4,r3
   11188:	18c00044 	addi	r3,r3,1
   1118c:	28cf883a 	add	r7,r5,r3
   11190:	10800003 	ldbu	r2,0(r2)
   11194:	39ffffc3 	ldbu	r7,-1(r7)
   11198:	11fff726 	beq	r2,r7,11178 <memcmp+0x4>
   1119c:	11c5c83a 	sub	r2,r2,r7
   111a0:	f800283a 	ret

000111a4 <strlen>:
   111a4:	2005883a 	mov	r2,r4
   111a8:	10c00007 	ldb	r3,0(r2)
   111ac:	1800021e 	bne	r3,zero,111b8 <strlen+0x14>
   111b0:	1105c83a 	sub	r2,r2,r4
   111b4:	f800283a 	ret
   111b8:	10800044 	addi	r2,r2,1
   111bc:	003ffa06 	br	111a8 <strlen+0x4>


tap.elf:     file format elf32-littlenios2
tap.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000011c0 memsz 0x000011c0 flags r-x
    LOAD off    0x000021e0 vaddr 0x000111e0 paddr 0x00011370 align 2**12
         filesz 0x00000190 memsz 0x00000190 flags rw-
    LOAD off    0x00002500 vaddr 0x00011500 paddr 0x00011500 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ff0  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  00011170  00011170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000190  000111e0  00011370  000021e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00011500  00011500  00002500  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011624  00011624  00002370  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000458  00000000  00000000  000023a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00005b38  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020a2  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00002e1c  00000000  00000000  0000a3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000570  00000000  00000000  0000d1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001b08  00000000  00000000  0000d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001cac  00000000  00000000  0000f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00010f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000370  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000128f6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000128f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000128fc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000128fd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000128fe  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00012907  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00012910  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00012919  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000050  00000000  00000000  0001292b  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f70  00000000  00000000  0001297b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e15d  00000000  00000000  000178eb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011170 l    d  .rodata	00000000 .rodata
000111e0 l    d  .rwdata	00000000 .rwdata
00011500 l    d  .bss	00000000 .bss
00011624 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tap_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010394 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000111e0 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000112c4 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010fb8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00011520 g     O .bss	00000004 alt_instruction_exception_handler
00010d28 g     F .text	0000002c alt_main
00011524 g     O .bss	00000100 alt_irq
00011370 g       *ABS*	00000000 __flash_rwdata_start
0001034c g     F .text	00000048 printf
00010d54 g     F .text	00000038 alt_putstr
00011354 g     O .rwdata	00000004 jtag_uart
000110a0 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010ea0 g     F .text	0000005c alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001150c g     O .bss	00000004 errno
00011518 g     O .bss	00000004 alt_argv
00019348 g       *ABS*	00000000 _gp
000101bc g     F .text	00000074 accelerometer_isr
000112f0 g     O .rwdata	00000030 alt_fd_list
0001102c g     F .text	00000070 alt_find_dev
00011148 g     F .text	00000028 memcpy
000110a8 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00010310 g     F .text	0000003c _printf_r
00010b2c g     F .text	00000064 .hidden __udivsi3
00011358 g     O .rwdata	00000004 alt_max_fd
00010c14 g     F .text	00000090 alt_irq_register
00011508 g     O .bss	00000004 tap_counter
00011348 g     O .rwdata	00000004 _global_impure_ptr
00011624 g       *ABS*	00000000 __bss_end
00011510 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011320 g     O .rwdata	00000028 alt_dev_null
00010fb4 g     F .text	00000004 alt_dcache_flush_all
00011370 g       *ABS*	00000000 __ram_rwdata_end
00010230 g     F .text	00000030 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001135c g     O .rwdata	00000008 alt_dev_list
00010d8c g     F .text	0000005c write
000111e0 g       *ABS*	00000000 __ram_rodata_end
00010b90 g     F .text	0000005c .hidden __umodsi3
00011624 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010e18 g     F .text	00000030 altera_avalon_jtag_uart_write
00010400 g     F .text	0000050c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
00010e08 g     F .text	00000010 alt_sys_init
00010e50 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011504 g     O .bss	00000004 prev_time
00010bec g     F .text	00000028 .hidden __mulsi3
000111e0 g       *ABS*	00000000 __ram_rwdata_start
00011170 g       *ABS*	00000000 __ram_rodata_start
00010efc g     F .text	0000005c alt_up_accelerometer_spi_read_y_axis
00011118 g     F .text	00000030 memcmp
00011624 g       *ABS*	00000000 __alt_stack_base
00010fc0 g     F .text	0000006c alt_dev_llist_insert
00010924 g     F .text	000000a8 __sfvwrite_small_dev
00011500 g       *ABS*	00000000 __bss_start
00010260 g     F .text	000000b0 main
00011514 g     O .bss	00000004 alt_envp
0001136c g     O .rwdata	00000004 alt_errno
00010a38 g     F .text	00000080 .hidden __divsi3
00011170 g       *ABS*	00000000 __flash_rodata_start
00010de8 g     F .text	00000020 alt_irq_init
000109e8 g     F .text	00000050 _write_r
0001134c g     O .rwdata	00000004 _impure_ptr
0001151c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00011364 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010e48 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011370 g       *ABS*	00000000 _edata
00011624 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010ab8 g     F .text	00000074 .hidden __modsi3
00010f58 g     F .text	0000005c alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00010e64 g     F .text	00000020 alt_up_accelerometer_spi_read
00010e84 g     F .text	0000001c alt_up_accelerometer_spi_write
000109cc g     F .text	0000001c strlen
0001109c g     F .text	00000004 alt_icache_flush_all
00011350 g     O .rwdata	00000004 alt_priority_mask
0001090c g     F .text	00000018 __vfprintf_internal
00011500 g     O .bss	00000004 acc_dev
00010ca4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84054904 	addi	r16,r16,5412
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
      mask <<= 1;
   10150:	1004907a 	slli	r2,r2,1
      i++;
   10154:	29400044 	addi	r5,r5,1
      if (active & mask)
   10158:	003ff006 	br	1011c <alt_irq_handler+0x20>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07617 	ldw	r2,-32296(gp)
{
   10160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
   10164:	10000326 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a4d214 	ori	gp,gp,37704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10854014 	ori	r2,r2,5376

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c58914 	ori	r3,r3,5668

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010ca40 	call	10ca4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010d280 	call	10d28 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <alt_after_alt_main>

000101bc <accelerometer_isr>:
// timer is decreasing value every time
// check if the time difference is small enough, in which case ignore the tap

void accelerometer_isr(){
  alt_8 data;
  alt_up_accelerometer_spi_read(acc_dev, 0x30, &data); // read INT source to clear interrupt
   101bc:	d1206e17 	ldw	r4,-32328(gp)
void accelerometer_isr(){
   101c0:	defffd04 	addi	sp,sp,-12
  alt_up_accelerometer_spi_read(acc_dev, 0x30, &data); // read INT source to clear interrupt
   101c4:	d98000c4 	addi	r6,sp,3
   101c8:	01400c04 	movi	r5,48
void accelerometer_isr(){
   101cc:	dfc00215 	stw	ra,8(sp)
   101d0:	dc000115 	stw	r16,4(sp)
  alt_up_accelerometer_spi_read(acc_dev, 0x30, &data); // read INT source to clear interrupt
   101d4:	0010e640 	call	10e64 <alt_up_accelerometer_spi_read>


  // perform write operation to save a snapshot of counter value in snap reg
  IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_BASE, 0x1); // value of data doesn't matter
   101d8:	00c00044 	movi	r3,1
   101dc:	008000b4 	movhi	r2,2
   101e0:	10c40535 	stwio	r3,4116(r2)
  alt_32 curr_time = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_BASE);
   101e4:	14040537 	ldwio	r16,4116(r2)
  // printf("%u\n", curr_time);

  if ( prev_time - curr_time > 15 ){ // valid tap
   101e8:	d0a06f17 	ldw	r2,-32324(gp)
   101ec:	1405c83a 	sub	r2,r2,r16
   101f0:	10800410 	cmplti	r2,r2,16
   101f4:	1000091e 	bne	r2,zero,1021c <accelerometer_isr+0x60>
    alt_putstr("tap\n");
   101f8:	01000074 	movhi	r4,1
   101fc:	21045c04 	addi	r4,r4,4464
   10200:	0010d540 	call	10d54 <alt_putstr>
    tap_counter++;
   10204:	d1607017 	ldw	r5,-32320(gp)
    printf("%d\n", tap_counter);
   10208:	01000074 	movhi	r4,1
   1020c:	21045e04 	addi	r4,r4,4472
    tap_counter++;
   10210:	29400044 	addi	r5,r5,1
   10214:	d1607015 	stw	r5,-32320(gp)
    printf("%d\n", tap_counter);
   10218:	001034c0 	call	1034c <printf>
  }

  prev_time = curr_time;
   1021c:	d4206f15 	stw	r16,-32324(gp)
}
   10220:	dfc00217 	ldw	ra,8(sp)
   10224:	dc000117 	ldw	r16,4(sp)
   10228:	dec00304 	addi	sp,sp,12
   1022c:	f800283a 	ret

00010230 <timer_init>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0002);
   10230:	00c00084 	movi	r3,2
   10234:	008000b4 	movhi	r2,2
   10238:	10c40135 	stwio	r3,4100(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1023c:	10040035 	stwio	zero,4096(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xFFFF);
   10240:	00bfffd4 	movui	r2,65535
   10244:	00c000b4 	movhi	r3,2
   10248:	18840235 	stwio	r2,4104(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0xFFFF);
   1024c:	18840335 	stwio	r2,4108(r3)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0006); // 0b0...0111
   10250:	00c00184 	movi	r3,6
   10254:	008000b4 	movhi	r2,2
   10258:	10c40135 	stwio	r3,4100(r2)
}
   1025c:	f800283a 	ret

00010260 <main>:

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
   10260:	01000074 	movhi	r4,1
{ 
   10264:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   10268:	21045f04 	addi	r4,r4,4476
{ 
   1026c:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   10270:	0010d540 	call	10d54 <alt_putstr>
  alt_putstr("Printing 3 axis accelerometer info:\n");
   10274:	01000074 	movhi	r4,1
   10278:	21046504 	addi	r4,r4,4500
   1027c:	0010d540 	call	10d54 <alt_putstr>

  /* Event loop never exits. */


  acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10280:	01000074 	movhi	r4,1
   10284:	21046f04 	addi	r4,r4,4540
   10288:	0010e480 	call	10e48 <alt_up_accelerometer_spi_open_dev>
   1028c:	d0a06e15 	stw	r2,-32328(gp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10290:	10001b26 	beq	r2,zero,10300 <main+0xa0>
   10294:	1009883a 	mov	r4,r2
        return 1;
  }

  // set bits to enable tap detection
  alt_up_accelerometer_spi_write(acc_dev, 0x2A, 0b00000001); // enable tap on z axis only
   10298:	01800044 	movi	r6,1
   1029c:	01400a84 	movi	r5,42
   102a0:	0010e840 	call	10e84 <alt_up_accelerometer_spi_write>
  alt_up_accelerometer_spi_write(acc_dev, 0x21, 0x10); // set DUR (0x10 = 10ms)
   102a4:	d1206e17 	ldw	r4,-32328(gp)
   102a8:	01800404 	movi	r6,16
   102ac:	01400844 	movi	r5,33
   102b0:	0010e840 	call	10e84 <alt_up_accelerometer_spi_write>
  // alt_up_accelerometer_spi_write(acc_dev, 0x22, 0xFF); // set LATENT register (0x20 = 10ms)
  // alt_up_accelerometer_spi_write(acc_dev, 0x23, 0xFF); // set WINDOW
  alt_up_accelerometer_spi_write(acc_dev, 0x1D ,0x16); // set THRESH_TAP (0x30 = 3g)
   102b4:	d1206e17 	ldw	r4,-32328(gp)
   102b8:	01800584 	movi	r6,22
   102bc:	01400744 	movi	r5,29
   102c0:	0010e840 	call	10e84 <alt_up_accelerometer_spi_write>

  // set bits in the accel register to enable interrupts
  alt_up_accelerometer_spi_write(acc_dev, 0x2F, 0b10111111); // set SINGLE_TAP to INT_1 pin
   102c4:	d1206e17 	ldw	r4,-32328(gp)
   102c8:	01802fc4 	movi	r6,191
   102cc:	01400bc4 	movi	r5,47
   102d0:	0010e840 	call	10e84 <alt_up_accelerometer_spi_write>
  alt_up_accelerometer_spi_write(acc_dev, 0x2E, 0b01000000); // enable single tap to generate interrupts
   102d4:	d1206e17 	ldw	r4,-32328(gp)
   102d8:	01801004 	movi	r6,64
   102dc:	01400b84 	movi	r5,46
   102e0:	0010e840 	call	10e84 <alt_up_accelerometer_spi_write>

  // set function to be executed on interrupt
  alt_irq_register(ACCELEROMETER_SPI_IRQ, 0, accelerometer_isr);
   102e4:	01800074 	movhi	r6,1
   102e8:	31806f04 	addi	r6,r6,444
   102ec:	000b883a 	mov	r5,zero
   102f0:	0009883a 	mov	r4,zero
   102f4:	0010c140 	call	10c14 <alt_irq_register>

  timer_init();
   102f8:	00102300 	call	10230 <timer_init>

  while (1){
   102fc:	003fff06 	br	102fc <main+0x9c>
    // printf("accel interrupts: %d\n", tap_counter);
  };

  return 0;
}
   10300:	00800044 	movi	r2,1
   10304:	dfc00017 	ldw	ra,0(sp)
   10308:	dec00104 	addi	sp,sp,4
   1030c:	f800283a 	ret

00010310 <_printf_r>:
   10310:	defffd04 	addi	sp,sp,-12
   10314:	dfc00015 	stw	ra,0(sp)
   10318:	d9800115 	stw	r6,4(sp)
   1031c:	d9c00215 	stw	r7,8(sp)
   10320:	21800217 	ldw	r6,8(r4)
   10324:	00c00074 	movhi	r3,1
   10328:	18c24904 	addi	r3,r3,2340
   1032c:	30c00115 	stw	r3,4(r6)
   10330:	280d883a 	mov	r6,r5
   10334:	21400217 	ldw	r5,8(r4)
   10338:	d9c00104 	addi	r7,sp,4
   1033c:	00104000 	call	10400 <___vfprintf_internal_r>
   10340:	dfc00017 	ldw	ra,0(sp)
   10344:	dec00304 	addi	sp,sp,12
   10348:	f800283a 	ret

0001034c <printf>:
   1034c:	defffc04 	addi	sp,sp,-16
   10350:	dfc00015 	stw	ra,0(sp)
   10354:	d9400115 	stw	r5,4(sp)
   10358:	d9800215 	stw	r6,8(sp)
   1035c:	d9c00315 	stw	r7,12(sp)
   10360:	00800074 	movhi	r2,1
   10364:	10c4d317 	ldw	r3,4940(r2)
   10368:	00800074 	movhi	r2,1
   1036c:	10824904 	addi	r2,r2,2340
   10370:	19400217 	ldw	r5,8(r3)
   10374:	d9800104 	addi	r6,sp,4
   10378:	28800115 	stw	r2,4(r5)
   1037c:	200b883a 	mov	r5,r4
   10380:	19000217 	ldw	r4,8(r3)
   10384:	001090c0 	call	1090c <__vfprintf_internal>
   10388:	dfc00017 	ldw	ra,0(sp)
   1038c:	dec00404 	addi	sp,sp,16
   10390:	f800283a 	ret

00010394 <print_repeat>:
   10394:	defffb04 	addi	sp,sp,-20
   10398:	dc800315 	stw	r18,12(sp)
   1039c:	dc400215 	stw	r17,8(sp)
   103a0:	dc000115 	stw	r16,4(sp)
   103a4:	dfc00415 	stw	ra,16(sp)
   103a8:	2025883a 	mov	r18,r4
   103ac:	2823883a 	mov	r17,r5
   103b0:	d9800005 	stb	r6,0(sp)
   103b4:	3821883a 	mov	r16,r7
   103b8:	04000716 	blt	zero,r16,103d8 <print_repeat+0x44>
   103bc:	0005883a 	mov	r2,zero
   103c0:	dfc00417 	ldw	ra,16(sp)
   103c4:	dc800317 	ldw	r18,12(sp)
   103c8:	dc400217 	ldw	r17,8(sp)
   103cc:	dc000117 	ldw	r16,4(sp)
   103d0:	dec00504 	addi	sp,sp,20
   103d4:	f800283a 	ret
   103d8:	88800117 	ldw	r2,4(r17)
   103dc:	01c00044 	movi	r7,1
   103e0:	d80d883a 	mov	r6,sp
   103e4:	880b883a 	mov	r5,r17
   103e8:	9009883a 	mov	r4,r18
   103ec:	103ee83a 	callr	r2
   103f0:	843fffc4 	addi	r16,r16,-1
   103f4:	103ff026 	beq	r2,zero,103b8 <print_repeat+0x24>
   103f8:	00bfffc4 	movi	r2,-1
   103fc:	003ff006 	br	103c0 <print_repeat+0x2c>

00010400 <___vfprintf_internal_r>:
   10400:	deffe604 	addi	sp,sp,-104
   10404:	df001815 	stw	fp,96(sp)
   10408:	ddc01715 	stw	r23,92(sp)
   1040c:	dd801615 	stw	r22,88(sp)
   10410:	dd001415 	stw	r20,80(sp)
   10414:	dcc01315 	stw	r19,76(sp)
   10418:	dc801215 	stw	r18,72(sp)
   1041c:	dc401115 	stw	r17,68(sp)
   10420:	dc001015 	stw	r16,64(sp)
   10424:	dfc01915 	stw	ra,100(sp)
   10428:	dd401515 	stw	r21,84(sp)
   1042c:	2021883a 	mov	r16,r4
   10430:	282f883a 	mov	r23,r5
   10434:	d9800515 	stw	r6,20(sp)
   10438:	3839883a 	mov	fp,r7
   1043c:	002d883a 	mov	r22,zero
   10440:	d8000215 	stw	zero,8(sp)
   10444:	0027883a 	mov	r19,zero
   10448:	0029883a 	mov	r20,zero
   1044c:	0025883a 	mov	r18,zero
   10450:	0023883a 	mov	r17,zero
   10454:	d8000115 	stw	zero,4(sp)
   10458:	d8000015 	stw	zero,0(sp)
   1045c:	0005883a 	mov	r2,zero
   10460:	00000206 	br	1046c <___vfprintf_internal_r+0x6c>
   10464:	114000e0 	cmpeqi	r5,r2,3
   10468:	28003f1e 	bne	r5,zero,10568 <___vfprintf_internal_r+0x168>
   1046c:	d8c00517 	ldw	r3,20(sp)
   10470:	19000003 	ldbu	r4,0(r3)
   10474:	18c00044 	addi	r3,r3,1
   10478:	d8c00515 	stw	r3,20(sp)
   1047c:	21803fcc 	andi	r6,r4,255
   10480:	3180201c 	xori	r6,r6,128
   10484:	31bfe004 	addi	r6,r6,-128
   10488:	30001426 	beq	r6,zero,104dc <___vfprintf_internal_r+0xdc>
   1048c:	114000a0 	cmpeqi	r5,r2,2
   10490:	2800231e 	bne	r5,zero,10520 <___vfprintf_internal_r+0x120>
   10494:	114000c8 	cmpgei	r5,r2,3
   10498:	283ff21e 	bne	r5,zero,10464 <___vfprintf_internal_r+0x64>
   1049c:	10000426 	beq	r2,zero,104b0 <___vfprintf_internal_r+0xb0>
   104a0:	10800060 	cmpeqi	r2,r2,1
   104a4:	10001a1e 	bne	r2,zero,10510 <___vfprintf_internal_r+0x110>
   104a8:	00800084 	movi	r2,2
   104ac:	003fef06 	br	1046c <___vfprintf_internal_r+0x6c>
   104b0:	31800960 	cmpeqi	r6,r6,37
   104b4:	3000fe1e 	bne	r6,zero,108b0 <___vfprintf_internal_r+0x4b0>
   104b8:	b8800117 	ldw	r2,4(r23)
   104bc:	d9000805 	stb	r4,32(sp)
   104c0:	01c00044 	movi	r7,1
   104c4:	d9800804 	addi	r6,sp,32
   104c8:	b80b883a 	mov	r5,r23
   104cc:	8009883a 	mov	r4,r16
   104d0:	103ee83a 	callr	r2
   104d4:	10001d26 	beq	r2,zero,1054c <___vfprintf_internal_r+0x14c>
   104d8:	05bfffc4 	movi	r22,-1
   104dc:	b005883a 	mov	r2,r22
   104e0:	dfc01917 	ldw	ra,100(sp)
   104e4:	df001817 	ldw	fp,96(sp)
   104e8:	ddc01717 	ldw	r23,92(sp)
   104ec:	dd801617 	ldw	r22,88(sp)
   104f0:	dd401517 	ldw	r21,84(sp)
   104f4:	dd001417 	ldw	r20,80(sp)
   104f8:	dcc01317 	ldw	r19,76(sp)
   104fc:	dc801217 	ldw	r18,72(sp)
   10500:	dc401117 	ldw	r17,68(sp)
   10504:	dc001017 	ldw	r16,64(sp)
   10508:	dec01a04 	addi	sp,sp,104
   1050c:	f800283a 	ret
   10510:	30800c20 	cmpeqi	r2,r6,48
   10514:	1000ef1e 	bne	r2,zero,108d4 <___vfprintf_internal_r+0x4d4>
   10518:	30800958 	cmpnei	r2,r6,37
   1051c:	103fe626 	beq	r2,zero,104b8 <___vfprintf_internal_r+0xb8>
   10520:	217ff404 	addi	r5,r4,-48
   10524:	29403fcc 	andi	r5,r5,255
   10528:	288002a8 	cmpgeui	r2,r5,10
   1052c:	10000b1e 	bne	r2,zero,1055c <___vfprintf_internal_r+0x15c>
   10530:	88bfffe0 	cmpeqi	r2,r17,-1
   10534:	1000071e 	bne	r2,zero,10554 <___vfprintf_internal_r+0x154>
   10538:	880490ba 	slli	r2,r17,2
   1053c:	1463883a 	add	r17,r2,r17
   10540:	8822907a 	slli	r17,r17,1
   10544:	2c63883a 	add	r17,r5,r17
   10548:	003fd706 	br	104a8 <___vfprintf_internal_r+0xa8>
   1054c:	b5800044 	addi	r22,r22,1
   10550:	003fc606 	br	1046c <___vfprintf_internal_r+0x6c>
   10554:	0023883a 	mov	r17,zero
   10558:	003ffa06 	br	10544 <___vfprintf_internal_r+0x144>
   1055c:	30800ba0 	cmpeqi	r2,r6,46
   10560:	1000e11e 	bne	r2,zero,108e8 <___vfprintf_internal_r+0x4e8>
   10564:	00800084 	movi	r2,2
   10568:	213ff404 	addi	r4,r4,-48
   1056c:	21003fcc 	andi	r4,r4,255
   10570:	214002a8 	cmpgeui	r5,r4,10
   10574:	2800091e 	bne	r5,zero,1059c <___vfprintf_internal_r+0x19c>
   10578:	917fffe0 	cmpeqi	r5,r18,-1
   1057c:	2800051e 	bne	r5,zero,10594 <___vfprintf_internal_r+0x194>
   10580:	900a90ba 	slli	r5,r18,2
   10584:	2ca5883a 	add	r18,r5,r18
   10588:	9024907a 	slli	r18,r18,1
   1058c:	24a5883a 	add	r18,r4,r18
   10590:	003fb606 	br	1046c <___vfprintf_internal_r+0x6c>
   10594:	0025883a 	mov	r18,zero
   10598:	003ffc06 	br	1058c <___vfprintf_internal_r+0x18c>
   1059c:	30801b20 	cmpeqi	r2,r6,108
   105a0:	1000cf1e 	bne	r2,zero,108e0 <___vfprintf_internal_r+0x4e0>
   105a4:	90bfffe0 	cmpeqi	r2,r18,-1
   105a8:	10000f1e 	bne	r2,zero,105e8 <___vfprintf_internal_r+0x1e8>
   105ac:	d8000015 	stw	zero,0(sp)
   105b0:	30801be0 	cmpeqi	r2,r6,111
   105b4:	1000ce1e 	bne	r2,zero,108f0 <___vfprintf_internal_r+0x4f0>
   105b8:	30801c08 	cmpgei	r2,r6,112
   105bc:	1000171e 	bne	r2,zero,1061c <___vfprintf_internal_r+0x21c>
   105c0:	308018e0 	cmpeqi	r2,r6,99
   105c4:	1000a31e 	bne	r2,zero,10854 <___vfprintf_internal_r+0x454>
   105c8:	30801908 	cmpgei	r2,r6,100
   105cc:	1000081e 	bne	r2,zero,105f0 <___vfprintf_internal_r+0x1f0>
   105d0:	31801620 	cmpeqi	r6,r6,88
   105d4:	303fa126 	beq	r6,zero,1045c <___vfprintf_internal_r+0x5c>
   105d8:	00800044 	movi	r2,1
   105dc:	d8800215 	stw	r2,8(sp)
   105e0:	05000404 	movi	r20,16
   105e4:	0000c306 	br	108f4 <___vfprintf_internal_r+0x4f4>
   105e8:	04800044 	movi	r18,1
   105ec:	003ff006 	br	105b0 <___vfprintf_internal_r+0x1b0>
   105f0:	30801920 	cmpeqi	r2,r6,100
   105f4:	1000021e 	bne	r2,zero,10600 <___vfprintf_internal_r+0x200>
   105f8:	31801a60 	cmpeqi	r6,r6,105
   105fc:	303f9726 	beq	r6,zero,1045c <___vfprintf_internal_r+0x5c>
   10600:	e0800104 	addi	r2,fp,4
   10604:	d8800415 	stw	r2,16(sp)
   10608:	9800ba26 	beq	r19,zero,108f4 <___vfprintf_internal_r+0x4f4>
   1060c:	e5400017 	ldw	r21,0(fp)
   10610:	a8002216 	blt	r21,zero,1069c <___vfprintf_internal_r+0x29c>
   10614:	04c00044 	movi	r19,1
   10618:	0000ba06 	br	10904 <___vfprintf_internal_r+0x504>
   1061c:	30801d60 	cmpeqi	r2,r6,117
   10620:	1000b41e 	bne	r2,zero,108f4 <___vfprintf_internal_r+0x4f4>
   10624:	30801e20 	cmpeqi	r2,r6,120
   10628:	103fed1e 	bne	r2,zero,105e0 <___vfprintf_internal_r+0x1e0>
   1062c:	31801ce0 	cmpeqi	r6,r6,115
   10630:	303f8a26 	beq	r6,zero,1045c <___vfprintf_internal_r+0x5c>
   10634:	e5400017 	ldw	r21,0(fp)
   10638:	e0800104 	addi	r2,fp,4
   1063c:	d8800315 	stw	r2,12(sp)
   10640:	a809883a 	mov	r4,r21
   10644:	00109cc0 	call	109cc <strlen>
   10648:	888fc83a 	sub	r7,r17,r2
   1064c:	1039883a 	mov	fp,r2
   10650:	01c0080e 	bge	zero,r7,10674 <___vfprintf_internal_r+0x274>
   10654:	01800804 	movi	r6,32
   10658:	b80b883a 	mov	r5,r23
   1065c:	8009883a 	mov	r4,r16
   10660:	d9c00415 	stw	r7,16(sp)
   10664:	00103940 	call	10394 <print_repeat>
   10668:	103f9b1e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   1066c:	d9c00417 	ldw	r7,16(sp)
   10670:	b1ed883a 	add	r22,r22,r7
   10674:	b8800117 	ldw	r2,4(r23)
   10678:	e00f883a 	mov	r7,fp
   1067c:	a80d883a 	mov	r6,r21
   10680:	b80b883a 	mov	r5,r23
   10684:	8009883a 	mov	r4,r16
   10688:	103ee83a 	callr	r2
   1068c:	103f921e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   10690:	b72d883a 	add	r22,r22,fp
   10694:	df000317 	ldw	fp,12(sp)
   10698:	003f7406 	br	1046c <___vfprintf_internal_r+0x6c>
   1069c:	056bc83a 	sub	r21,zero,r21
   106a0:	04c00044 	movi	r19,1
   106a4:	00c00044 	movi	r3,1
   106a8:	df000804 	addi	fp,sp,32
   106ac:	e00d883a 	mov	r6,fp
   106b0:	a8002e1e 	bne	r21,zero,1076c <___vfprintf_internal_r+0x36c>
   106b4:	e185c83a 	sub	r2,fp,r6
   106b8:	d8800315 	stw	r2,12(sp)
   106bc:	9085c83a 	sub	r2,r18,r2
   106c0:	0080090e 	bge	zero,r2,106e8 <___vfprintf_internal_r+0x2e8>
   106c4:	e085883a 	add	r2,fp,r2
   106c8:	d9001004 	addi	r4,sp,64
   106cc:	e100042e 	bgeu	fp,r4,106e0 <___vfprintf_internal_r+0x2e0>
   106d0:	e7000044 	addi	fp,fp,1
   106d4:	01000c04 	movi	r4,48
   106d8:	e13fffc5 	stb	r4,-1(fp)
   106dc:	e0bffa1e 	bne	fp,r2,106c8 <___vfprintf_internal_r+0x2c8>
   106e0:	e185c83a 	sub	r2,fp,r6
   106e4:	d8800315 	stw	r2,12(sp)
   106e8:	d8800317 	ldw	r2,12(sp)
   106ec:	1897883a 	add	r11,r3,r2
   106f0:	d8800017 	ldw	r2,0(sp)
   106f4:	8aebc83a 	sub	r21,r17,r11
   106f8:	10003526 	beq	r2,zero,107d0 <___vfprintf_internal_r+0x3d0>
   106fc:	18000a26 	beq	r3,zero,10728 <___vfprintf_internal_r+0x328>
   10700:	00800b44 	movi	r2,45
   10704:	d88007c5 	stb	r2,31(sp)
   10708:	b8800117 	ldw	r2,4(r23)
   1070c:	01c00044 	movi	r7,1
   10710:	d98007c4 	addi	r6,sp,31
   10714:	b80b883a 	mov	r5,r23
   10718:	8009883a 	mov	r4,r16
   1071c:	103ee83a 	callr	r2
   10720:	103f6d1e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   10724:	b5800044 	addi	r22,r22,1
   10728:	0540070e 	bge	zero,r21,10748 <___vfprintf_internal_r+0x348>
   1072c:	a80f883a 	mov	r7,r21
   10730:	01800c04 	movi	r6,48
   10734:	b80b883a 	mov	r5,r23
   10738:	8009883a 	mov	r4,r16
   1073c:	00103940 	call	10394 <print_repeat>
   10740:	103f651e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   10744:	b56d883a 	add	r22,r22,r21
   10748:	d8800317 	ldw	r2,12(sp)
   1074c:	b72d883a 	add	r22,r22,fp
   10750:	172bc83a 	sub	r21,r2,fp
   10754:	af05883a 	add	r2,r21,fp
   10758:	b707c83a 	sub	r3,r22,fp
   1075c:	00803216 	blt	zero,r2,10828 <___vfprintf_internal_r+0x428>
   10760:	df000417 	ldw	fp,16(sp)
   10764:	182d883a 	mov	r22,r3
   10768:	003f3c06 	br	1045c <___vfprintf_internal_r+0x5c>
   1076c:	a809883a 	mov	r4,r21
   10770:	a00b883a 	mov	r5,r20
   10774:	d8c00615 	stw	r3,24(sp)
   10778:	0010b2c0 	call	10b2c <__udivsi3>
   1077c:	1009883a 	mov	r4,r2
   10780:	a00b883a 	mov	r5,r20
   10784:	d8800315 	stw	r2,12(sp)
   10788:	0010bec0 	call	10bec <__mulsi3>
   1078c:	a8abc83a 	sub	r21,r21,r2
   10790:	a8800288 	cmpgei	r2,r21,10
   10794:	d9000317 	ldw	r4,12(sp)
   10798:	d8c00617 	ldw	r3,24(sp)
   1079c:	d9800804 	addi	r6,sp,32
   107a0:	1000051e 	bne	r2,zero,107b8 <___vfprintf_internal_r+0x3b8>
   107a4:	ad400c04 	addi	r21,r21,48
   107a8:	e7000044 	addi	fp,fp,1
   107ac:	e57fffc5 	stb	r21,-1(fp)
   107b0:	202b883a 	mov	r21,r4
   107b4:	003fbe06 	br	106b0 <___vfprintf_internal_r+0x2b0>
   107b8:	d8800217 	ldw	r2,8(sp)
   107bc:	10000226 	beq	r2,zero,107c8 <___vfprintf_internal_r+0x3c8>
   107c0:	ad400dc4 	addi	r21,r21,55
   107c4:	003ff806 	br	107a8 <___vfprintf_internal_r+0x3a8>
   107c8:	ad4015c4 	addi	r21,r21,87
   107cc:	003ff606 	br	107a8 <___vfprintf_internal_r+0x3a8>
   107d0:	0540090e 	bge	zero,r21,107f8 <___vfprintf_internal_r+0x3f8>
   107d4:	a80f883a 	mov	r7,r21
   107d8:	01800804 	movi	r6,32
   107dc:	b80b883a 	mov	r5,r23
   107e0:	8009883a 	mov	r4,r16
   107e4:	d8c00615 	stw	r3,24(sp)
   107e8:	00103940 	call	10394 <print_repeat>
   107ec:	103f3a1e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   107f0:	d8c00617 	ldw	r3,24(sp)
   107f4:	b56d883a 	add	r22,r22,r21
   107f8:	183fd326 	beq	r3,zero,10748 <___vfprintf_internal_r+0x348>
   107fc:	00800b44 	movi	r2,45
   10800:	d88007c5 	stb	r2,31(sp)
   10804:	b8800117 	ldw	r2,4(r23)
   10808:	01c00044 	movi	r7,1
   1080c:	d98007c4 	addi	r6,sp,31
   10810:	b80b883a 	mov	r5,r23
   10814:	8009883a 	mov	r4,r16
   10818:	103ee83a 	callr	r2
   1081c:	103f2e1e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   10820:	b5800044 	addi	r22,r22,1
   10824:	003fc806 	br	10748 <___vfprintf_internal_r+0x348>
   10828:	e0bfffc3 	ldbu	r2,-1(fp)
   1082c:	01c00044 	movi	r7,1
   10830:	d98007c4 	addi	r6,sp,31
   10834:	d88007c5 	stb	r2,31(sp)
   10838:	b8800117 	ldw	r2,4(r23)
   1083c:	b80b883a 	mov	r5,r23
   10840:	8009883a 	mov	r4,r16
   10844:	e73fffc4 	addi	fp,fp,-1
   10848:	103ee83a 	callr	r2
   1084c:	103fc126 	beq	r2,zero,10754 <___vfprintf_internal_r+0x354>
   10850:	003f2106 	br	104d8 <___vfprintf_internal_r+0xd8>
   10854:	88800090 	cmplti	r2,r17,2
   10858:	1000081e 	bne	r2,zero,1087c <___vfprintf_internal_r+0x47c>
   1085c:	8d7fffc4 	addi	r21,r17,-1
   10860:	a80f883a 	mov	r7,r21
   10864:	01800804 	movi	r6,32
   10868:	b80b883a 	mov	r5,r23
   1086c:	8009883a 	mov	r4,r16
   10870:	00103940 	call	10394 <print_repeat>
   10874:	103f181e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   10878:	b56d883a 	add	r22,r22,r21
   1087c:	e0800017 	ldw	r2,0(fp)
   10880:	01c00044 	movi	r7,1
   10884:	d9800804 	addi	r6,sp,32
   10888:	d8800805 	stb	r2,32(sp)
   1088c:	b8800117 	ldw	r2,4(r23)
   10890:	b80b883a 	mov	r5,r23
   10894:	8009883a 	mov	r4,r16
   10898:	e5400104 	addi	r21,fp,4
   1089c:	103ee83a 	callr	r2
   108a0:	103f0d1e 	bne	r2,zero,104d8 <___vfprintf_internal_r+0xd8>
   108a4:	b5800044 	addi	r22,r22,1
   108a8:	a839883a 	mov	fp,r21
   108ac:	003eef06 	br	1046c <___vfprintf_internal_r+0x6c>
   108b0:	d8000215 	stw	zero,8(sp)
   108b4:	d8000115 	stw	zero,4(sp)
   108b8:	d8000015 	stw	zero,0(sp)
   108bc:	04c00044 	movi	r19,1
   108c0:	05000284 	movi	r20,10
   108c4:	04bfffc4 	movi	r18,-1
   108c8:	047fffc4 	movi	r17,-1
   108cc:	00800044 	movi	r2,1
   108d0:	003ee606 	br	1046c <___vfprintf_internal_r+0x6c>
   108d4:	00800044 	movi	r2,1
   108d8:	d8800015 	stw	r2,0(sp)
   108dc:	003ef206 	br	104a8 <___vfprintf_internal_r+0xa8>
   108e0:	00800044 	movi	r2,1
   108e4:	d8800115 	stw	r2,4(sp)
   108e8:	008000c4 	movi	r2,3
   108ec:	003edf06 	br	1046c <___vfprintf_internal_r+0x6c>
   108f0:	05000204 	movi	r20,8
   108f4:	e0800104 	addi	r2,fp,4
   108f8:	d8800415 	stw	r2,16(sp)
   108fc:	e5400017 	ldw	r21,0(fp)
   10900:	0027883a 	mov	r19,zero
   10904:	0007883a 	mov	r3,zero
   10908:	003f6706 	br	106a8 <___vfprintf_internal_r+0x2a8>

0001090c <__vfprintf_internal>:
   1090c:	00800074 	movhi	r2,1
   10910:	300f883a 	mov	r7,r6
   10914:	280d883a 	mov	r6,r5
   10918:	200b883a 	mov	r5,r4
   1091c:	1104d317 	ldw	r4,4940(r2)
   10920:	00104001 	jmpi	10400 <___vfprintf_internal_r>

00010924 <__sfvwrite_small_dev>:
   10924:	2880000b 	ldhu	r2,0(r5)
   10928:	1080020c 	andi	r2,r2,8
   1092c:	10002526 	beq	r2,zero,109c4 <__sfvwrite_small_dev+0xa0>
   10930:	2880008f 	ldh	r2,2(r5)
   10934:	defffb04 	addi	sp,sp,-20
   10938:	dcc00315 	stw	r19,12(sp)
   1093c:	dc800215 	stw	r18,8(sp)
   10940:	dc400115 	stw	r17,4(sp)
   10944:	dc000015 	stw	r16,0(sp)
   10948:	dfc00415 	stw	ra,16(sp)
   1094c:	2027883a 	mov	r19,r4
   10950:	2821883a 	mov	r16,r5
   10954:	3025883a 	mov	r18,r6
   10958:	3823883a 	mov	r17,r7
   1095c:	1000100e 	bge	r2,zero,109a0 <__sfvwrite_small_dev+0x7c>
   10960:	8080000b 	ldhu	r2,0(r16)
   10964:	10801014 	ori	r2,r2,64
   10968:	8080000d 	sth	r2,0(r16)
   1096c:	00bfffc4 	movi	r2,-1
   10970:	00000d06 	br	109a8 <__sfvwrite_small_dev+0x84>
   10974:	88810050 	cmplti	r2,r17,1025
   10978:	880f883a 	mov	r7,r17
   1097c:	1000011e 	bne	r2,zero,10984 <__sfvwrite_small_dev+0x60>
   10980:	01c10004 	movi	r7,1024
   10984:	8140008f 	ldh	r5,2(r16)
   10988:	900d883a 	mov	r6,r18
   1098c:	9809883a 	mov	r4,r19
   10990:	00109e80 	call	109e8 <_write_r>
   10994:	00bff20e 	bge	zero,r2,10960 <__sfvwrite_small_dev+0x3c>
   10998:	88a3c83a 	sub	r17,r17,r2
   1099c:	90a5883a 	add	r18,r18,r2
   109a0:	047ff416 	blt	zero,r17,10974 <__sfvwrite_small_dev+0x50>
   109a4:	0005883a 	mov	r2,zero
   109a8:	dfc00417 	ldw	ra,16(sp)
   109ac:	dcc00317 	ldw	r19,12(sp)
   109b0:	dc800217 	ldw	r18,8(sp)
   109b4:	dc400117 	ldw	r17,4(sp)
   109b8:	dc000017 	ldw	r16,0(sp)
   109bc:	dec00504 	addi	sp,sp,20
   109c0:	f800283a 	ret
   109c4:	00bfffc4 	movi	r2,-1
   109c8:	f800283a 	ret

000109cc <strlen>:
   109cc:	2005883a 	mov	r2,r4
   109d0:	10c00007 	ldb	r3,0(r2)
   109d4:	1800021e 	bne	r3,zero,109e0 <strlen+0x14>
   109d8:	1105c83a 	sub	r2,r2,r4
   109dc:	f800283a 	ret
   109e0:	10800044 	addi	r2,r2,1
   109e4:	003ffa06 	br	109d0 <strlen+0x4>

000109e8 <_write_r>:
   109e8:	defffe04 	addi	sp,sp,-8
   109ec:	dc000015 	stw	r16,0(sp)
   109f0:	00800074 	movhi	r2,1
   109f4:	2021883a 	mov	r16,r4
   109f8:	2809883a 	mov	r4,r5
   109fc:	300b883a 	mov	r5,r6
   10a00:	380d883a 	mov	r6,r7
   10a04:	dfc00115 	stw	ra,4(sp)
   10a08:	10054315 	stw	zero,5388(r2)
   10a0c:	0010d8c0 	call	10d8c <write>
   10a10:	10ffffd8 	cmpnei	r3,r2,-1
   10a14:	1800041e 	bne	r3,zero,10a28 <_write_r+0x40>
   10a18:	00c00074 	movhi	r3,1
   10a1c:	18c54317 	ldw	r3,5388(r3)
   10a20:	18000126 	beq	r3,zero,10a28 <_write_r+0x40>
   10a24:	80c00015 	stw	r3,0(r16)
   10a28:	dfc00117 	ldw	ra,4(sp)
   10a2c:	dc000017 	ldw	r16,0(sp)
   10a30:	dec00204 	addi	sp,sp,8
   10a34:	f800283a 	ret

00010a38 <__divsi3>:
   10a38:	20001a16 	blt	r4,zero,10aa4 <__divsi3+0x6c>
   10a3c:	000f883a 	mov	r7,zero
   10a40:	2800020e 	bge	r5,zero,10a4c <__divsi3+0x14>
   10a44:	014bc83a 	sub	r5,zero,r5
   10a48:	39c0005c 	xori	r7,r7,1
   10a4c:	200d883a 	mov	r6,r4
   10a50:	00c00044 	movi	r3,1
   10a54:	2900092e 	bgeu	r5,r4,10a7c <__divsi3+0x44>
   10a58:	00800804 	movi	r2,32
   10a5c:	00c00044 	movi	r3,1
   10a60:	00000106 	br	10a68 <__divsi3+0x30>
   10a64:	10001226 	beq	r2,zero,10ab0 <__divsi3+0x78>
   10a68:	294b883a 	add	r5,r5,r5
   10a6c:	10bfffc4 	addi	r2,r2,-1
   10a70:	18c7883a 	add	r3,r3,r3
   10a74:	293ffb36 	bltu	r5,r4,10a64 <__divsi3+0x2c>
   10a78:	18000d26 	beq	r3,zero,10ab0 <__divsi3+0x78>
   10a7c:	0005883a 	mov	r2,zero
   10a80:	31400236 	bltu	r6,r5,10a8c <__divsi3+0x54>
   10a84:	314dc83a 	sub	r6,r6,r5
   10a88:	10c4b03a 	or	r2,r2,r3
   10a8c:	1806d07a 	srli	r3,r3,1
   10a90:	280ad07a 	srli	r5,r5,1
   10a94:	183ffa1e 	bne	r3,zero,10a80 <__divsi3+0x48>
   10a98:	38000126 	beq	r7,zero,10aa0 <__divsi3+0x68>
   10a9c:	0085c83a 	sub	r2,zero,r2
   10aa0:	f800283a 	ret
   10aa4:	0109c83a 	sub	r4,zero,r4
   10aa8:	01c00044 	movi	r7,1
   10aac:	003fe406 	br	10a40 <__divsi3+0x8>
   10ab0:	0005883a 	mov	r2,zero
   10ab4:	003ff806 	br	10a98 <__divsi3+0x60>

00010ab8 <__modsi3>:
   10ab8:	20001916 	blt	r4,zero,10b20 <__modsi3+0x68>
   10abc:	000f883a 	mov	r7,zero
   10ac0:	2005883a 	mov	r2,r4
   10ac4:	2800010e 	bge	r5,zero,10acc <__modsi3+0x14>
   10ac8:	014bc83a 	sub	r5,zero,r5
   10acc:	00c00044 	movi	r3,1
   10ad0:	2900092e 	bgeu	r5,r4,10af8 <__modsi3+0x40>
   10ad4:	01800804 	movi	r6,32
   10ad8:	00c00044 	movi	r3,1
   10adc:	00000106 	br	10ae4 <__modsi3+0x2c>
   10ae0:	30000d26 	beq	r6,zero,10b18 <__modsi3+0x60>
   10ae4:	294b883a 	add	r5,r5,r5
   10ae8:	31bfffc4 	addi	r6,r6,-1
   10aec:	18c7883a 	add	r3,r3,r3
   10af0:	293ffb36 	bltu	r5,r4,10ae0 <__modsi3+0x28>
   10af4:	18000826 	beq	r3,zero,10b18 <__modsi3+0x60>
   10af8:	1806d07a 	srli	r3,r3,1
   10afc:	11400136 	bltu	r2,r5,10b04 <__modsi3+0x4c>
   10b00:	1145c83a 	sub	r2,r2,r5
   10b04:	280ad07a 	srli	r5,r5,1
   10b08:	183ffb1e 	bne	r3,zero,10af8 <__modsi3+0x40>
   10b0c:	38000126 	beq	r7,zero,10b14 <__modsi3+0x5c>
   10b10:	0085c83a 	sub	r2,zero,r2
   10b14:	f800283a 	ret
   10b18:	2005883a 	mov	r2,r4
   10b1c:	003ffb06 	br	10b0c <__modsi3+0x54>
   10b20:	0109c83a 	sub	r4,zero,r4
   10b24:	01c00044 	movi	r7,1
   10b28:	003fe506 	br	10ac0 <__modsi3+0x8>

00010b2c <__udivsi3>:
   10b2c:	200d883a 	mov	r6,r4
   10b30:	2900152e 	bgeu	r5,r4,10b88 <__udivsi3+0x5c>
   10b34:	28001416 	blt	r5,zero,10b88 <__udivsi3+0x5c>
   10b38:	00800804 	movi	r2,32
   10b3c:	00c00044 	movi	r3,1
   10b40:	00000206 	br	10b4c <__udivsi3+0x20>
   10b44:	10000e26 	beq	r2,zero,10b80 <__udivsi3+0x54>
   10b48:	28000516 	blt	r5,zero,10b60 <__udivsi3+0x34>
   10b4c:	294b883a 	add	r5,r5,r5
   10b50:	10bfffc4 	addi	r2,r2,-1
   10b54:	18c7883a 	add	r3,r3,r3
   10b58:	293ffa36 	bltu	r5,r4,10b44 <__udivsi3+0x18>
   10b5c:	18000826 	beq	r3,zero,10b80 <__udivsi3+0x54>
   10b60:	0005883a 	mov	r2,zero
   10b64:	31400236 	bltu	r6,r5,10b70 <__udivsi3+0x44>
   10b68:	314dc83a 	sub	r6,r6,r5
   10b6c:	10c4b03a 	or	r2,r2,r3
   10b70:	1806d07a 	srli	r3,r3,1
   10b74:	280ad07a 	srli	r5,r5,1
   10b78:	183ffa1e 	bne	r3,zero,10b64 <__udivsi3+0x38>
   10b7c:	f800283a 	ret
   10b80:	0005883a 	mov	r2,zero
   10b84:	f800283a 	ret
   10b88:	00c00044 	movi	r3,1
   10b8c:	003ff406 	br	10b60 <__udivsi3+0x34>

00010b90 <__umodsi3>:
   10b90:	2005883a 	mov	r2,r4
   10b94:	2900132e 	bgeu	r5,r4,10be4 <__umodsi3+0x54>
   10b98:	28001216 	blt	r5,zero,10be4 <__umodsi3+0x54>
   10b9c:	01800804 	movi	r6,32
   10ba0:	00c00044 	movi	r3,1
   10ba4:	00000206 	br	10bb0 <__umodsi3+0x20>
   10ba8:	30000c26 	beq	r6,zero,10bdc <__umodsi3+0x4c>
   10bac:	28000516 	blt	r5,zero,10bc4 <__umodsi3+0x34>
   10bb0:	294b883a 	add	r5,r5,r5
   10bb4:	31bfffc4 	addi	r6,r6,-1
   10bb8:	18c7883a 	add	r3,r3,r3
   10bbc:	293ffa36 	bltu	r5,r4,10ba8 <__umodsi3+0x18>
   10bc0:	18000626 	beq	r3,zero,10bdc <__umodsi3+0x4c>
   10bc4:	1806d07a 	srli	r3,r3,1
   10bc8:	11400136 	bltu	r2,r5,10bd0 <__umodsi3+0x40>
   10bcc:	1145c83a 	sub	r2,r2,r5
   10bd0:	280ad07a 	srli	r5,r5,1
   10bd4:	183ffb1e 	bne	r3,zero,10bc4 <__umodsi3+0x34>
   10bd8:	f800283a 	ret
   10bdc:	2005883a 	mov	r2,r4
   10be0:	f800283a 	ret
   10be4:	00c00044 	movi	r3,1
   10be8:	003ff606 	br	10bc4 <__umodsi3+0x34>

00010bec <__mulsi3>:
   10bec:	0005883a 	mov	r2,zero
   10bf0:	20000726 	beq	r4,zero,10c10 <__mulsi3+0x24>
   10bf4:	20c0004c 	andi	r3,r4,1
   10bf8:	2008d07a 	srli	r4,r4,1
   10bfc:	18000126 	beq	r3,zero,10c04 <__mulsi3+0x18>
   10c00:	1145883a 	add	r2,r2,r5
   10c04:	294b883a 	add	r5,r5,r5
   10c08:	203ffa1e 	bne	r4,zero,10bf4 <__mulsi3+0x8>
   10c0c:	f800283a 	ret
   10c10:	f800283a 	ret

00010c14 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10c14:	20800828 	cmpgeui	r2,r4,32
   10c18:	1000201e 	bne	r2,zero,10c9c <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
   10c1c:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c20:	00ffff84 	movi	r3,-2
   10c24:	38c4703a 	and	r2,r7,r3
   10c28:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10c2c:	201090fa 	slli	r8,r4,3
   10c30:	00800074 	movhi	r2,1
   10c34:	10854904 	addi	r2,r2,5412
   10c38:	1205883a 	add	r2,r2,r8
   10c3c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10c40:	11400115 	stw	r5,4(r2)
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10c44:	00800044 	movi	r2,1
   10c48:	1108983a 	sll	r4,r2,r4

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10c4c:	30000c26 	beq	r6,zero,10c80 <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
   10c50:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c54:	10c6703a 	and	r3,r2,r3
   10c58:	1801703a 	wrctl	status,r3
   10c5c:	d0e07217 	ldw	r3,-32312(gp)
   10c60:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
   10c64:	d1207215 	stw	r4,-32312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c68:	d0e07217 	ldw	r3,-32312(gp)
   10c6c:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
   10c70:	1001703a 	wrctl	status,r2
   10c74:	3801703a 	wrctl	status,r7
   10c78:	0005883a 	mov	r2,zero
}
   10c7c:	f800283a 	ret
  NIOS2_READ_STATUS (context);
   10c80:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c84:	10c6703a 	and	r3,r2,r3
   10c88:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
   10c8c:	d0e07217 	ldw	r3,-32312(gp)
   10c90:	0108303a 	nor	r4,zero,r4
   10c94:	20c8703a 	and	r4,r4,r3
   10c98:	003ff206 	br	10c64 <alt_irq_register+0x50>
  int rc = -EINVAL;  
   10c9c:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
   10ca0:	f800283a 	ret

00010ca4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10ca4:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10ca8:	01000074 	movhi	r4,1
   10cac:	01400074 	movhi	r5,1
   10cb0:	dfc00015 	stw	ra,0(sp)
   10cb4:	21047804 	addi	r4,r4,4576
   10cb8:	2944dc04 	addi	r5,r5,4976
   10cbc:	21400426 	beq	r4,r5,10cd0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   10cc0:	01800074 	movhi	r6,1
   10cc4:	3184dc04 	addi	r6,r6,4976
   10cc8:	310dc83a 	sub	r6,r6,r4
   10ccc:	00111480 	call	11148 <memcpy>
  if (to != from)
   10cd0:	01000074 	movhi	r4,1
   10cd4:	01400074 	movhi	r5,1
   10cd8:	21000804 	addi	r4,r4,32
   10cdc:	29400804 	addi	r5,r5,32
   10ce0:	21400426 	beq	r4,r5,10cf4 <alt_load+0x50>
      *to++ = *from++;
   10ce4:	01800074 	movhi	r6,1
   10ce8:	31806004 	addi	r6,r6,384
   10cec:	310dc83a 	sub	r6,r6,r4
   10cf0:	00111480 	call	11148 <memcpy>
  if (to != from)
   10cf4:	01000074 	movhi	r4,1
   10cf8:	01400074 	movhi	r5,1
   10cfc:	21045c04 	addi	r4,r4,4464
   10d00:	29445c04 	addi	r5,r5,4464
   10d04:	21400426 	beq	r4,r5,10d18 <alt_load+0x74>
      *to++ = *from++;
   10d08:	01800074 	movhi	r6,1
   10d0c:	31847804 	addi	r6,r6,4576
   10d10:	310dc83a 	sub	r6,r6,r4
   10d14:	00111480 	call	11148 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10d18:	0010fb40 	call	10fb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10d1c:	dfc00017 	ldw	ra,0(sp)
   10d20:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   10d24:	001109c1 	jmpi	1109c <alt_icache_flush_all>

00010d28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d28:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d2c:	0009883a 	mov	r4,zero
{
   10d30:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   10d34:	0010de80 	call	10de8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d38:	0010e080 	call	10e08 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d3c:	d1a07317 	ldw	r6,-32308(gp)
   10d40:	d1607417 	ldw	r5,-32304(gp)
   10d44:	d1207517 	ldw	r4,-32300(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10d48:	dfc00017 	ldw	ra,0(sp)
   10d4c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   10d50:	00102601 	jmpi	10260 <main>

00010d54 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10d54:	defffe04 	addi	sp,sp,-8
   10d58:	dc000015 	stw	r16,0(sp)
   10d5c:	dfc00115 	stw	ra,4(sp)
   10d60:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10d64:	00109cc0 	call	109cc <strlen>
   10d68:	01000074 	movhi	r4,1
   10d6c:	000f883a 	mov	r7,zero
   10d70:	100d883a 	mov	r6,r2
   10d74:	800b883a 	mov	r5,r16
   10d78:	2104d504 	addi	r4,r4,4948
#else
    return fputs(str, stdout);
#endif
#endif
}
   10d7c:	dfc00117 	ldw	ra,4(sp)
   10d80:	dc000017 	ldw	r16,0(sp)
   10d84:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10d88:	0010e181 	jmpi	10e18 <altera_avalon_jtag_uart_write>

00010d8c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10d8c:	213fffc4 	addi	r4,r4,-1
   10d90:	210000a8 	cmpgeui	r4,r4,2
   10d94:	2000041e 	bne	r4,zero,10da8 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   10d98:	01000074 	movhi	r4,1
   10d9c:	000f883a 	mov	r7,zero
   10da0:	2104d504 	addi	r4,r4,4948
   10da4:	0010e181 	jmpi	10e18 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10da8:	d0a00917 	ldw	r2,-32732(gp)
   10dac:	10000926 	beq	r2,zero,10dd4 <write+0x48>
{
   10db0:	deffff04 	addi	sp,sp,-4
   10db4:	dfc00015 	stw	ra,0(sp)
   10db8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10dbc:	00c01444 	movi	r3,81
   10dc0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10dc4:	00bfffc4 	movi	r2,-1
   10dc8:	dfc00017 	ldw	ra,0(sp)
   10dcc:	dec00104 	addi	sp,sp,4
   10dd0:	f800283a 	ret
   10dd4:	d0a07104 	addi	r2,gp,-32316
        ALT_ERRNO = EBADFD;
   10dd8:	00c01444 	movi	r3,81
   10ddc:	10c00015 	stw	r3,0(r2)
}
   10de0:	00bfffc4 	movi	r2,-1
   10de4:	f800283a 	ret

00010de8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10de8:	deffff04 	addi	sp,sp,-4
   10dec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10df0:	00110a00 	call	110a0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10df4:	00800044 	movi	r2,1
   10df8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10dfc:	dfc00017 	ldw	ra,0(sp)
   10e00:	dec00104 	addi	sp,sp,4
   10e04:	f800283a 	ret

00010e08 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10e08:	01000074 	movhi	r4,1
   10e0c:	d1600504 	addi	r5,gp,-32748
   10e10:	2104b104 	addi	r4,r4,4804
   10e14:	0010fc01 	jmpi	10fc0 <alt_dev_llist_insert>

00010e18 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10e18:	21000017 	ldw	r4,0(r4)
{
   10e1c:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   10e20:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   10e24:	29800136 	bltu	r5,r6,10e2c <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   10e28:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10e2c:	20c00137 	ldwio	r3,4(r4)
   10e30:	18ffffec 	andhi	r3,r3,65535
   10e34:	183ffb26 	beq	r3,zero,10e24 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10e38:	28c00007 	ldb	r3,0(r5)
   10e3c:	29400044 	addi	r5,r5,1
   10e40:	20c00035 	stwio	r3,0(r4)
   10e44:	003ff706 	br	10e24 <altera_avalon_jtag_uart_write+0xc>

00010e48 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10e48:	d1600504 	addi	r5,gp,-32748
   10e4c:	001102c1 	jmpi	1102c <alt_find_dev>

00010e50 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10e50:	20800a17 	ldw	r2,40(r4)
   10e54:	10800023 	ldbuio	r2,0(r2)
   10e58:	28800005 	stb	r2,0(r5)

	return 0;
}
   10e5c:	0005883a 	mov	r2,zero
   10e60:	f800283a 	ret

00010e64 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e64:	20800a17 	ldw	r2,40(r4)
   10e68:	29400fcc 	andi	r5,r5,63
   10e6c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10e70:	20800a17 	ldw	r2,40(r4)
   10e74:	10800063 	ldbuio	r2,1(r2)
   10e78:	30800005 	stb	r2,0(r6)

	return 0;
}
   10e7c:	0005883a 	mov	r2,zero
   10e80:	f800283a 	ret

00010e84 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10e84:	20800a17 	ldw	r2,40(r4)
   10e88:	29400fcc 	andi	r5,r5,63
   10e8c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10e90:	20800a17 	ldw	r2,40(r4)
   10e94:	11800065 	stbio	r6,1(r2)

	return 0;
}
   10e98:	0005883a 	mov	r2,zero
   10e9c:	f800283a 	ret

00010ea0 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10ea0:	20800a17 	ldw	r2,40(r4)
   10ea4:	00c00c84 	movi	r3,50
   10ea8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10eac:	20800a17 	ldw	r2,40(r4)
   10eb0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10eb4:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10eb8:	10803fcc 	andi	r2,r2,255
   10ebc:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10ec0:	20800a17 	ldw	r2,40(r4)
   10ec4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10ec8:	20800a17 	ldw	r2,40(r4)
   10ecc:	10800063 	ldbuio	r2,1(r2)
   10ed0:	10803fcc 	andi	r2,r2,255
   10ed4:	28c00017 	ldw	r3,0(r5)
   10ed8:	1004923a 	slli	r2,r2,8
   10edc:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   10ee0:	10e0000c 	andi	r3,r2,32768
   10ee4:	1800031e 	bne	r3,zero,10ef4 <alt_up_accelerometer_spi_read_x_axis+0x54>
	{
		*(x_axis) |= 0xFFFF0000;
   10ee8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10eec:	0005883a 	mov	r2,zero
   10ef0:	f800283a 	ret
		*(x_axis) |= 0xFFFF0000;
   10ef4:	10bffff4 	orhi	r2,r2,65535
   10ef8:	003ffb06 	br	10ee8 <alt_up_accelerometer_spi_read_x_axis+0x48>

00010efc <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10efc:	20800a17 	ldw	r2,40(r4)
   10f00:	00c00d04 	movi	r3,52
   10f04:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10f08:	20800a17 	ldw	r2,40(r4)
   10f0c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f10:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10f14:	10803fcc 	andi	r2,r2,255
   10f18:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f1c:	20800a17 	ldw	r2,40(r4)
   10f20:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10f24:	20800a17 	ldw	r2,40(r4)
   10f28:	10800063 	ldbuio	r2,1(r2)
   10f2c:	10803fcc 	andi	r2,r2,255
   10f30:	28c00017 	ldw	r3,0(r5)
   10f34:	1004923a 	slli	r2,r2,8
   10f38:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   10f3c:	10e0000c 	andi	r3,r2,32768
   10f40:	1800031e 	bne	r3,zero,10f50 <alt_up_accelerometer_spi_read_y_axis+0x54>
	{
		*(y_axis) |= 0xFFFF0000;
   10f44:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10f48:	0005883a 	mov	r2,zero
   10f4c:	f800283a 	ret
		*(y_axis) |= 0xFFFF0000;
   10f50:	10bffff4 	orhi	r2,r2,65535
   10f54:	003ffb06 	br	10f44 <alt_up_accelerometer_spi_read_y_axis+0x48>

00010f58 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f58:	20800a17 	ldw	r2,40(r4)
   10f5c:	00c00d84 	movi	r3,54
   10f60:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10f64:	20800a17 	ldw	r2,40(r4)
   10f68:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f6c:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10f70:	10803fcc 	andi	r2,r2,255
   10f74:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10f78:	20800a17 	ldw	r2,40(r4)
   10f7c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10f80:	20800a17 	ldw	r2,40(r4)
   10f84:	10800063 	ldbuio	r2,1(r2)
   10f88:	10803fcc 	andi	r2,r2,255
   10f8c:	28c00017 	ldw	r3,0(r5)
   10f90:	1004923a 	slli	r2,r2,8
   10f94:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   10f98:	10e0000c 	andi	r3,r2,32768
   10f9c:	1800031e 	bne	r3,zero,10fac <alt_up_accelerometer_spi_read_z_axis+0x54>
	{
		*(z_axis) |= 0xFFFF0000;
   10fa0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10fa4:	0005883a 	mov	r2,zero
   10fa8:	f800283a 	ret
		*(z_axis) |= 0xFFFF0000;
   10fac:	10bffff4 	orhi	r2,r2,65535
   10fb0:	003ffb06 	br	10fa0 <alt_up_accelerometer_spi_read_z_axis+0x48>

00010fb4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10fb4:	f800283a 	ret

00010fb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10fb8:	3005883a 	mov	r2,r6
  return len;
}
   10fbc:	f800283a 	ret

00010fc0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10fc0:	20000226 	beq	r4,zero,10fcc <alt_dev_llist_insert+0xc>
   10fc4:	20800217 	ldw	r2,8(r4)
   10fc8:	10000b1e 	bne	r2,zero,10ff8 <alt_dev_llist_insert+0x38>
   10fcc:	d0a00917 	ldw	r2,-32732(gp)
   10fd0:	10001126 	beq	r2,zero,11018 <alt_dev_llist_insert+0x58>
{
   10fd4:	deffff04 	addi	sp,sp,-4
   10fd8:	dfc00015 	stw	ra,0(sp)
   10fdc:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   10fe0:	00c00584 	movi	r3,22
   10fe4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10fe8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10fec:	dfc00017 	ldw	ra,0(sp)
   10ff0:	dec00104 	addi	sp,sp,4
   10ff4:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10ff8:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   10ffc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11000:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11004:	28800017 	ldw	r2,0(r5)
   11008:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   1100c:	29000015 	stw	r4,0(r5)
  return 0;  
   11010:	0005883a 	mov	r2,zero
   11014:	f800283a 	ret
   11018:	d0a07104 	addi	r2,gp,-32316
    ALT_ERRNO = EINVAL;
   1101c:	00c00584 	movi	r3,22
   11020:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11024:	00bffa84 	movi	r2,-22
}
   11028:	f800283a 	ret

0001102c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1102c:	defffb04 	addi	sp,sp,-20
   11030:	dcc00315 	stw	r19,12(sp)
   11034:	dc800215 	stw	r18,8(sp)
   11038:	dc400115 	stw	r17,4(sp)
   1103c:	dc000015 	stw	r16,0(sp)
   11040:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   11044:	2c000017 	ldw	r16,0(r5)
{
   11048:	2027883a 	mov	r19,r4
   1104c:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   11050:	00109cc0 	call	109cc <strlen>
   11054:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11058:	8440091e 	bne	r16,r17,11080 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1105c:	0021883a 	mov	r16,zero
}
   11060:	8005883a 	mov	r2,r16
   11064:	dfc00417 	ldw	ra,16(sp)
   11068:	dcc00317 	ldw	r19,12(sp)
   1106c:	dc800217 	ldw	r18,8(sp)
   11070:	dc400117 	ldw	r17,4(sp)
   11074:	dc000017 	ldw	r16,0(sp)
   11078:	dec00504 	addi	sp,sp,20
   1107c:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   11080:	81000217 	ldw	r4,8(r16)
   11084:	900d883a 	mov	r6,r18
   11088:	980b883a 	mov	r5,r19
   1108c:	00111180 	call	11118 <memcmp>
   11090:	103ff326 	beq	r2,zero,11060 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   11094:	84000017 	ldw	r16,0(r16)
   11098:	003fef06 	br	11058 <alt_find_dev+0x2c>

0001109c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1109c:	f800283a 	ret

000110a0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   110a0:	000170fa 	wrctl	ienable,zero
}
   110a4:	f800283a 	ret

000110a8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   110a8:	213ffe84 	addi	r4,r4,-6
   110ac:	20800428 	cmpgeui	r2,r4,16
   110b0:	1000151e 	bne	r2,zero,11108 <alt_exception_cause_generated_bad_addr+0x60>
   110b4:	200890ba 	slli	r4,r4,2
   110b8:	00800074 	movhi	r2,1
   110bc:	2085883a 	add	r2,r4,r2
   110c0:	10843217 	ldw	r2,4296(r2)
   110c4:	1000683a 	jmp	r2
   110c8:	00011110 	cmplti	zero,zero,1092
   110cc:	00011110 	cmplti	zero,zero,1092
   110d0:	00011108 	cmpgei	zero,zero,1092
   110d4:	00011108 	cmpgei	zero,zero,1092
   110d8:	00011108 	cmpgei	zero,zero,1092
   110dc:	00011110 	cmplti	zero,zero,1092
   110e0:	00011108 	cmpgei	zero,zero,1092
   110e4:	00011108 	cmpgei	zero,zero,1092
   110e8:	00011110 	cmplti	zero,zero,1092
   110ec:	00011110 	cmplti	zero,zero,1092
   110f0:	00011108 	cmpgei	zero,zero,1092
   110f4:	00011110 	cmplti	zero,zero,1092
   110f8:	00011108 	cmpgei	zero,zero,1092
   110fc:	00011108 	cmpgei	zero,zero,1092
   11100:	00011108 	cmpgei	zero,zero,1092
   11104:	00011110 	cmplti	zero,zero,1092
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11108:	0005883a 	mov	r2,zero
   1110c:	f800283a 	ret
   11110:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11114:	f800283a 	ret

00011118 <memcmp>:
   11118:	0007883a 	mov	r3,zero
   1111c:	30c0021e 	bne	r6,r3,11128 <memcmp+0x10>
   11120:	0005883a 	mov	r2,zero
   11124:	f800283a 	ret
   11128:	20c5883a 	add	r2,r4,r3
   1112c:	18c00044 	addi	r3,r3,1
   11130:	28cf883a 	add	r7,r5,r3
   11134:	10800003 	ldbu	r2,0(r2)
   11138:	39ffffc3 	ldbu	r7,-1(r7)
   1113c:	11fff726 	beq	r2,r7,1111c <memcmp+0x4>
   11140:	11c5c83a 	sub	r2,r2,r7
   11144:	f800283a 	ret

00011148 <memcpy>:
   11148:	2005883a 	mov	r2,r4
   1114c:	0007883a 	mov	r3,zero
   11150:	30c0011e 	bne	r6,r3,11158 <memcpy+0x10>
   11154:	f800283a 	ret
   11158:	28cf883a 	add	r7,r5,r3
   1115c:	39c00003 	ldbu	r7,0(r7)
   11160:	10c9883a 	add	r4,r2,r3
   11164:	18c00044 	addi	r3,r3,1
   11168:	21c00005 	stb	r7,0(r4)
   1116c:	003ff806 	br	11150 <memcpy+0x8>

import tornado.web
import json
from Translator.utils import tapsToWord, getDelay
import datetime
import sqlite3
from sqlite3 import Error
import datetime

#####################################################################
# DataBase:
#####################################################################
def sql_connection():
    try:
        con = sqlite3.connect('mydatabase.db')
        return con
    except Error:
        print(Error)

def sql_table(con):
    cursorObj = con.cursor()
    cursorObj.execute("CREATE TABLE IF NOT EXISTS GoodDB(TimeKey text PRIMARY KEY, DeviceId integer, message text, original text, receive integer, confidence text, timestamps text )")
    con.commit()

def sql_insert(con, entities):
    cursorObj = con.cursor()   
    cursorObj.execute('''INSERT INTO GoodDB(CompositeKey, DeviceId, message, original, receive, confidence, timestamps) VALUES(?, ?, ?, ?, ?, ?, ?)''', entities)   
    con.commit()

con = sql_connection()
sql_table(con)

#####################################################################
# Handlers
#####################################################################
messageQueue = []
deviceIDs = []
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        data_in = self.request.body
        data_in = json.loads(data_in)
        timestamps = data_in["taps"]

        #Converting float list to string list
        display_taps = data_in["taps"]
        str_taps_lst = list(map(str,display_taps))
        comma_sep = ','.join(str_taps_lst)

        display_taps = data_in["taps"]
        timestamps = [{'time':datetime.datetime.fromtimestamp(x)} for x in timestamps]
        corrected_word, original_word, confidence = tapsToWord(timestamps, delay=getDelay(timestamps))
        sender = data_in["DeviceID"]
        receive = data_in["RecipientID"]
        messageQueue.append({"to":receive,"from":sender,"message":corrected_word, "original":original_word, "confidence":confidence})
        
        ct = datetime.datetime.now()
        ts = str(ct.timestamp())


        entities = (ts,  int(sender), " ".join(corrected_word), " ".join(original_word), int(receive), " ".join(confidence), comma_sep)
        sql_insert(con, entities)
        self.write({"to":receive,"from":sender,"message":corrected_word, "original":original_word, "confidence":confidence})

class TestHandler(tornado.web.RequestHandler):
    def get(self):
        data_in = {"test": "test_data", "taps": [1678961397.600011, 1678961397.889011, 1678961398.206011, 1678961399.048011, 1678961399.251011, 1678961399.455011, 1678961399.677011, 1678961400.403011, 1678961400.642011, 1678961401.919011, 1678961402.139011, 1678961402.369011, 1678961403.220011, 1678961403.984011, 1678961404.189011, 1678961404.384011, 1678961404.581011, 1678961404.811011, 1678961405.545011, 1678961405.762011, 1678961405.965011, 1678961406.168011, 1678961406.380011, 1678961407.015011, 1678961407.232011, 1678961407.440011, 1678961408.108011, 1678961408.315011, 1678961408.524011, 1678961408.735011, 1678961409.374011, 1678961409.944011, 1678961410.151011, 1678961410.356011, 1678961410.564011, 1678961411.208011, 1678961411.425011, 1678961411.620011, 1678961411.821011, 1678961412.024011, 1678961412.726011, 1678961412.946011, 1678961413.770011, 1678961413.994011, 1678961414.190011, 1678961414.427011, 1678961415.221011, 1678961415.945011, 1678961416.146011, 1678961416.347011, 1678961416.972011, 1678961417.569011, 1678961417.764011, 1678961417.963011, 1678961418.602011, 1678961418.786011, 1678961419.023011, 1678961419.226011, 1678961419.429011, 1678961420.440011, 1678961420.636011, 1678961420.840011, 1678961421.655011, 1678961422.442011, 1678961422.647011, 1678961423.411011, 1678961423.620011, 1678961423.827011, 1678961424.524011, 1678961425.197011, 1678961425.397011, 1678961426.188011, 1678961426.387011, 1678961426.577011, 1678961426.752011, 1678961427.686011, 1678961427.883011, 1678961428.087011, 1678961428.308011, 1678961429.082011, 1678961429.304011, 1678961429.492011, 1678961429.705011, 1678961429.909011, 1678961430.839011, 1678961431.067011, 1678961431.950011, 1678961432.172011, 1678961432.410011, 1678961433.112011, 1678961433.319011, 1678961433.522011, 1678961434.415011, 1678961434.626011, 1678961434.834011, 1678961435.073011, 1678961435.268011, 1678961435.978011, 1678961436.189011, 1678961436.398011, 1678961437.142011, 1678961437.343011, 1678961438.069011, 1678961438.708011, 1678961438.916011, 1678961439.124011, 1678961439.784011, 1678961439.977011, 1678961440.195011, 1678961440.404011, 1678961441.069011, 1678961441.270011, 1678961441.479011, 1678961441.693011, 1678961441.902011, 1678961442.539011, 1678961442.769011, 1678961443.607011, 1678961444.389011, 1678961444.588011, 1678961444.788011, 1678961444.979011, 1678961445.170011, 1678961446.218011, 1678961446.423011, 1678961446.641011, 1678961447.365011, 1678961447.624011, 1678961448.377011, 1678961448.588011, 1678961448.787011, 1678961448.987011, 1678961449.180011, 1678961450.025011, 1678961450.232011, 1678961450.439011, 1678961450.657011, 1678961451.351011, 1678961451.554011, 1678961451.749011, 1678961451.958011, 1678961452.161011, 1678961452.862011, 1678961453.065011, 1678961453.287011, 1678961454.107011, 1678961454.320011, 1678961455.046011, 1678961455.275011, 1678961455.479011, 1678961456.292011, 1678961456.500011, 1678961456.713011, 1678961456.916011, 1678961457.129011, 1678961458.008011, 1678961458.212011, 1678961458.421011, 1678961458.645011, 1678961459.417011, 1678961459.637011, 1678961459.863011, 1678961460.058011, 1678961460.836011, 1678961461.032011, 1678961461.244011, 1678961461.464011, 1678961461.654011, 1678961462.348011, 1678961462.560011, 1678961462.777011, 1678961463.393011, 1678961463.585011, 1678961463.823011, 1678961464.626011, 1678961464.830011, 1678961465.063011, 1678961465.275011, 1678961466.026011, 1678961466.230011, 1678961466.437011, 1678961466.646011, 1678961466.854011, 1678961467.695011, 1678961468.840011, 1678961470.123011, 1678961470.352011, 1678961470.560011, 1678961470.767011, 1678961470.984011, 1678961472.517011, 1678961472.726011, 1678961472.944011, 1678961473.193011, 1678961474.097011, 1678961474.310011, 1678961475.130011, 1678961475.331011, 1678961475.555011, 1678961475.746011, 1678961475.985011, 1678961476.941011, 1678961477.142011, 1678961477.368011, 1678961478.462011, 1678961478.659011, 1678961478.897011, 1678961479.126011, 1678961479.804011, 1678961480.030011, 1678961480.231011, 1678961480.461011, 1678961481.215011, 1678961481.443011, 1678961482.340011, 1678961482.565011, 1678961482.777011, 1678961483.919011, 1678961484.749011, 1678961484.962011, 1678961485.176011, 1678961485.397011, 1678961485.600011, 1678961486.381011, 1678961486.590011, 1678961486.791011, 1678961487.007011, 1678961488.370011, 1678961488.594011, 1678961488.832011, 1678961489.539011, 1678961489.748011, 1678961489.957011, 1678961490.546011, 1678961491.291011, 1678961492.032011, 1678961492.771011, 1678961492.995011, 1678961493.200011, 1678961493.429011, 1678961493.638011, 1678961494.407011, 1678961494.624011, 1678961494.846011, 1678961495.079011, 1678961495.284011, 1678961496.006011, 1678961496.223011, 1678961496.416011, 1678961496.624011, 1678961496.840011, 1678961498.211011, 1678961498.424011, 1678961498.623011, 1678961498.860011, 1678961499.826011, 1678961500.042011, 1678961500.239011, 1678961500.444011, 1678961500.668011, 1678961501.586011, 1678961501.794011, 1678961502.007011, 1678961502.629011, 1678961503.541011, 1678961503.759011, 1678961504.011011, 1678961504.235011, 1678961505.183011, 1678961505.397011, 1678961505.621011, 1678961506.773011, 1678961506.993011, 1678961507.194011, 1678961507.429011, 1678961508.398011, 1678961508.771011, 1678961509.514011, 1678961509.770011, 1678961510.894011, 1678961511.018011, 1678961511.107011, 1678961511.242011, 1678961511.341011, 1678961511.452011, 1678961511.566011, 1678961511.676011, 1678961511.797011, 1678961511.913011, 1678961512.037011, 1678961512.162011, 1678961512.294011, 1678961512.414011, 1678961512.534011, 1678961512.650011, 1678961512.670011, 1678961512.768011, 1678961512.874011, 1678961513.003011, 1678961513.105011, 1678961513.225011, 1678961513.339011, 1678961513.451011, 1678961513.579011]}
        timestamps = data_in["taps"]

        #Converting float list to string list
        display_taps = data_in["taps"]
        str_taps_lst = list(map(str,display_taps))
        comma_sep = ','.join(str_taps_lst)

        timestamps = [{'time':datetime.datetime.fromtimestamp(x)} for x in timestamps]
        corrected_word, original_word, confidence = tapsToWord(timestamps, delay=getDelay(timestamps))
        sender = 1
        receive = 1
        messageQueue.append({"to":receive,"from":sender,"message":corrected_word, "original":original_word, "confidence":confidence})

        ct = datetime.datetime.now()
        ts = str(ct.timestamp())

        entities = (ts, int(sender), " ".join(corrected_word), " ".join(original_word), int(receive), " ".join(confidence), comma_sep)
        sql_insert(con, entities)
        self.write({"corrected":corrected_word,"original": original_word,"confidence": confidence})

class PingHandler(tornado.web.RequestHandler):
    def get(self):
        data_in = self.request.body
        data_in = json.loads(data_in)
        pinger = data_in["DeviceID"]
        messages = [message for message in messageQueue if message["to"] in [-1,pinger]]
        buffer = {'messages':messages}
        if buffer['messages']:
            for message in messages:
                if not (message["to"] == -1 and message["from"] == pinger):
                    messageQueue.remove(message)
            self.set_status(status_code=200)
            self.write(buffer)
        else:
            self.set_status(status_code=206)
            self.write(buffer)

class StartupHandler(tornado.web.RequestHandler):
    def get(self):
        ip = self.request.remote_ip
        data_in = self.request.body
        if data_in:
            data_in = json.loads(data_in)
            deviceIDs.append(data_in["ip"])
        if ip not in deviceIDs:
            deviceIDs.append(ip)
            data = {"deviceID":deviceIDs.index(ip)}
            self.write(data)
        else:
            data = {"deviceID":deviceIDs.index(ip)}
            self.write(data)

class StatusHandler(tornado.web.RequestHandler):
    def get(self):
        # con.execute("DROP TABLE GoodDB")
        # print("data dropped successfully")
        # # close the connection
        # con.close()
        self.write("""Status: <br>
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣿⣿⣷⣶⣄⣀⣀<br>
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣾⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀<br>
⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡟⠁⣰⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⣿⣧<br>
⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⠏⠀⣴⣿⣿⣿⠉⠀⠀⠀⠀⠀⠈⢻⣿⣿⣇<br>
⠀⠀⠀⠀⢀⣠⣼⣿⣿⡏⠀⢠⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡀<br>
⠀⠀⠀⣰⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡇<br>
⠀⠀⢰⣿⣿⡿⣿⣿⣿⡇⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣿⠁<br>
⠀⠀⣿⣿⣿⠁⣿⣿⣿⡇⠀⠀⠻⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⠃<br>
⠀⢰⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁<br>
⠀⢸⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠉⢉⣿⣿<br>
⠀⢸⣿⣿⣇⠀⣿⣿⣿⠀⠀⠀⠀⠀⢀⣤⣤⣤⡀⠀⠀⢸⣿⣿⣿⣷⣦⠀<br>
⠀⠀⢻⣿⣿⣶⣿⣿⣿⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣦⡀⠀⠉⠉⠻⣿⣿⡇<br>
⠀⠀⠀⠛⠿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠈⠹⣿⣿⣇⣀⠀⣠⣾⣿⣿⡇<br>
⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣦⣤⣤⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀<br>
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⣿⣿⣿⠿⠋⠉⠛⠋⠉⠉⠁⠀<br>
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉<br>
version: MVP0.1""")

